{\rtf1 \mac \ansicpg10000 \nisusversion40007 \deff0 {\fonttbl {\f0 \froman \fcharset77 Times-Roman{\*\falt Times};}{\f1 \fswiss \fcharset77 LucidaGrande{\*\falt Lucida Grande};}{\f2 \fswiss \fcharset77 LucidaGrande-Bold{\*\falt Lucida Grande};}{\f3 \fmodern \fcharset77 Courier;}{\f4 \fnil \fcharset77 Tahoma-Bold{\*\falt Tahoma};}{\f5 \fswiss \fcharset77 Tahoma;}}{\colortbl ;\red0 \green0 \blue233 ;\red0 \green0 \blue0 ;\red0 \green0 \blue255 ;}{\*\revtbl {Unknown;}{ ;}}\nisusrevtypes0 \donotshowinsdel1 {\*\nisustoctable {\nisustoc \tcf68 {\nisustocname Default TOC}{\*\nisustoctabrep  }{\*\nisustocretrep  }{\nisustoclevelstyle TOC 1}{\nisustoclevelstyle TOC 2}{\nisustoclevelstyle TOC 3}{\nisustoclevelstyle TOC 4}{\nisustoclevelstyle TOC 5}{\nisustoclevelstyle TOC 6}{\nisustoclevelstyle TOC 7}{\nisustoclevelstyle TOC 8}{\nisustoclevelstyle TOC 9}}\nisusactivetoc68
}{\*\nisusxetable {\nisusxe \xef68 {\nisusxename Default Index}{\nisusxeheaderstyle Index Heading}{\nisusxelevelstyle Index 1}{\nisusxelevelstyle Index 2}{\nisusxelevelstyle Index 3}{\nisusxelevelstyle Index 4}{\nisusxelevelstyle Index 5}{\nisusxelevelstyle Index 6}{\nisusxelevelstyle Index 7}{\nisusxelevelstyle Index 8}{\nisusxelevelstyle Index 9}{\*\fldinst INDEX \\k ". " \\g \endash  \\e "\tab " \\l ", " \\f D}}\nisusactivexe68
}{\stylesheet {\s813 \nisusnoteplacement0 \nisusnotespanheight1300 \nisusnotespanlines5 \nisusnotedocrefstyle814 \nisusnoterefstyle815 \nisusnotegutterh60 {\*\nisusnotedefaulttext .\u160 ?}\nisusnotedivalign2
\nisusnotedivpercent25 \nisusnotedivoverpercent75 {\*\nisusnotedivstyle \nisusbrdredge \brdrs \brdrw20 \brdrcf2 }\sbasedon816 \f0\fs24 \ql\nowidctlpar\keep0\keepn0\sb0\sa0\sl240\slmult1\ltrpar
\pardirnatural\hyphpar1\li0\lin0\fi0\ri0\rin0 Footnote;}{\*\cs814 \super Note Reference;}{\*\cs815 \sbasedon814 \nosupersub Note Reference in Note;}{\s816 \snext816 \f0\fs24 \ql\widctlpar\keep0\keepn0\sb0\sa0\sl240\slmult1\ltrpar\pardirnatural\hyphpar1\li0\lin0\fi0\ri0\rin0 Normal;}{\s817 \nisusnoteplacement2 \nisusnotespanheight1300 \nisusnotespanlines5 \nisusnotedocrefstyle814 \nisusnoterefstyle815 \nisusnotegutterh60 {\*\nisusnotedefaulttext .\u160 ?}\nisusnotedivalign2
\nisusnotedivpercent25 \nisusnotedivoverpercent75 {\*\nisusnotedivstyle \nisusbrdredge \brdrs \brdrw20 \brdrcf2 }\sbasedon816 \f0\fs24 \ql\widctlpar\keep0\keepn0\sb0\sa0\sl240\slmult1\ltrpar
\pardirnatural\hyphpar1\li0\lin0\fi0\ri0\rin0 Endnote;}{\s818 \snext816 \sbasedon816 \f4\fs28\b \ql\widctlpar\keep0\keepn0\sb120\sa0\sl240\slmult1\ltrpar\pardirnatural\hyphpar1\li0\lin0\fi0\ri0\rin0 \tcf68 \tcl1 Heading 1;}{\s819 \snext816 \sbasedon818 \f4\fs26\b \ql\widctlpar\keep0\keepn0\sb120\sa0\sl240\slmult1\ltrpar\pardirnatural\hyphpar1\li0\lin0\fi0\ri0\rin0 \tcf68 \tcl2 Heading 2;}{\s820 \snext816 \sbasedon819 \f4\fs26\b\i \ql\widctlpar\keep0\keepn0\sb120\sa0\sl240\slmult1\ltrpar\pardirnatural\hyphpar1\li0\lin0\fi0\ri0\rin0 \tcf68 \tcl3 Heading 3;}{\s821 \snext821 \sbasedon816 \f0\fs24 \ql\widctlpar\keep0\keepn0\sb0\sa0\sl240\slmult1\ltrpar\pardirnatural\hyphpar1\li0\lin0\fi0\ri0\rin0 Header;}{\s822 \snext816 \sbasedon816 \f4\fs28\b \qc\widctlpar\keep0\keepn0\sb0\sa0\sl240\slmult1\ltrpar\pardirnatural\hyphpar1\li0\lin0\fi0\ri0\rin0 Title;}{\s823 \snext823 \sbasedon816 \f0\fs24 \ql\widctlpar\keep0\keepn0\sb0\sa0\sl240\slmult1\ltrpar\pardirnatural\hyphpar1\li0\lin0\fi0\ri0\rin0 Footer;}{\s824 \snext824 \sbasedon816 \f0\fs24 \ql\widctlpar\keep0\keepn0\sb0\sa0\sl240\slmult1\ltrpar\pardirnatural\hyphpar1\li1080\lin1080\fi0\ri1020\rin1020 Block Quote;}{\*\cs825 \i Emphatic;}{\s826 \snext816 \sbasedon820 \f5\fs26\b0\i0 \ql\widctlpar\keep0\keepn0\sb120\sa0\sl240\slmult1\ltrpar\pardirnatural\hyphpar1\li0\lin0\fi0\ri0\rin0 \tcf68 \tcl4 Heading 4;}{\s827 \snext816 \sbasedon826 \f5\fs26\b0\i0\ul \ql\widctlpar\keep0\keepn0\sb120\sa0\sl240\slmult1\ltrpar\pardirnatural\hyphpar1\li0\lin0\fi0\ri0\rin0 \tcf68 \tcl5 Heading 5;}{\s828 \snext816 \sbasedon827 \f5\fs26\b0\i\ul \ql\widctlpar\keep0\keepn0\sb120\sa0\sl240\slmult1\ltrpar\pardirnatural\hyphpar1\li0\lin0\fi0\ri0\rin0 \tcf68 \tcl6 Heading 6;}{\*\cs829 \b Strong;}{\*\cs847 \ul\cf3 Hyperlink;}}{\*\listtable {\list \listhybrid {\listlevel \levelnfc1 \levelnfcn1 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'02\'00.;}{\levelnumbers \'01;}\li360
\lin360 \fi-360 \ri0 \rin0 }{\listlevel \levelnfc3 \levelnfcn3 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'02\'01.;}{\levelnumbers \'01;}\li720
\lin720 \fi-360 \ri0 \rin0 }{\listlevel \levelnfc0 \levelnfcn0 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'02\'02.;}{\levelnumbers \'01;}\li1080
\lin1080 \fi-360 \ri0 \rin0 }{\listlevel \levelnfc4 \levelnfcn4 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'02\'03);}{\levelnumbers \'01;}\li1440
\lin1440 \fi-360 \ri0 \rin0 }{\listlevel \levelnfc0 \levelnfcn0 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'03(\'04);}{\levelnumbers \'02;}\li1800
\lin1800 \fi-360 \ri0 \rin0 }{\listlevel \levelnfc4 \levelnfcn4 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'03(\'05);}{\levelnumbers \'02;}\li2160
\lin2160 \fi-360 \ri0 \rin0 }{\listlevel \levelnfc2 \levelnfcn2 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'03(\'06);}{\levelnumbers \'02;}\li2520
\lin2520 \fi-360 \ri0 \rin0 }{\listlevel \levelnfc4 \levelnfcn4 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'03(\'07);}{\levelnumbers \'02;}\li2880
\lin2880 \fi-360 \ri0 \rin0 }{\listlevel \levelnfc2 \levelnfcn2 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'03(\'08);}{\levelnumbers \'02;}\li3240
\lin3240 \fi-360 \ri0 \rin0 }{\listname ;}\listid958829064 \nisuslistcontnum0 {\*\liststylename Outline;}}{\list \listhybrid {\listlevel \levelnfc0 \levelnfcn0 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'02\'00.;}{\levelnumbers \'01;}\li576
\lin576 \fi-576 \ri0 \rin0 }{\listlevel \levelnfc0 \levelnfcn0 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'04\'00.\'01.;}{\levelnumbers \'01\'03;}\li796
\lin796 \fi-796 \ri0 \rin0 }{\listlevel \levelnfc0 \levelnfcn0 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'06\'00.\'01.\'02.;}{\levelnumbers \'01\'03\'05;}\li1016
\lin1016 \fi-1016 \ri0 \rin0 }{\listlevel \levelnfc0 \levelnfcn0 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'08\'00.\'01.\'02.\'03.;}{\levelnumbers \'01\'03\'05\'07;}\li1236
\lin1236 \fi-1236 \ri0 \rin0 }{\listlevel \levelnfc0 \levelnfcn0 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'0a\'00.\'01.\'02.\'03.\'04.;}{\levelnumbers \'01\'03\'05\'07\'09;}\li1456
\lin1456 \fi-1456 \ri0 \rin0 }{\listlevel \levelnfc0 \levelnfcn0 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'0c\'00.\'01.\'02.\'03.\'04.\'05.;}{\levelnumbers \'01\'03\'05\'07\'09\'0b;}\li1676
\lin1676 \fi-1676 \ri0 \rin0 }{\listlevel \levelnfc0 \levelnfcn0 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'0e\'00.\'01.\'02.\'03.\'04.\'05.\'06.;}{\levelnumbers \'01\'03\'05\'07\'09\'0b\'0d;}\li1896
\lin1896 \fi-1896 \ri0 \rin0 }{\listlevel \levelnfc0 \levelnfcn0 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'10\'00.\'01.\'02.\'03.\'04.\'05.\'06.\'07.;}{\levelnumbers \'01\'03\'05\'07\'09\'0b\'0d\'0f;}\li2116
\lin2116 \fi-2116 \ri0 \rin0 }{\listlevel \levelnfc0 \levelnfcn0 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'12\'00.\'01.\'02.\'03.\'04.\'05.\'06.\'07.\'08.;}{\levelnumbers \'01\'03\'05\'07\'09\'0b\'0d\'0f\'11;}\li2336
\lin2336 \fi-2336 \ri0 \rin0 }{\listname ;}\listid322791560 \nisuslistcontnum1 {\*\liststylename Headings;}}{\list \listsimple1 {\listlevel \levelnfc23 \levelnfcn23 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'01\u8226 ?;}{\levelnumbers ;}\li720
\lin720 \fi-500 \ri0 \rin0 }{\listname ;}\listid108668244 \nisuslistcontnum1 {\*\liststylename Bullet List 3;}}{\list \listsimple1 {\listlevel \levelnfc0 \levelnfcn0 \leveljcn0 \levelfollow0 \levelstartat2 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'02\'00.;}{\levelnumbers \'01;}\li720
\lin720 \fi-500 \ri0 \rin0 }{\listname ;}\listid614056598 \nisuslistcontnum1 {\*\liststylename Number List 1;}}{\list \listhybrid {\listlevel \levelnfc0 \levelnfcn0 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'02\'00.;}{\levelnumbers \'01;}\li648
\lin648 \fi-648 \ri0 \rin0 }{\listlevel \levelnfc0 \levelnfcn0 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'04\'00.\'01.;}{\levelnumbers \'01\'03;}\li868
\lin868 \fi-868 \ri0 \rin0 }{\listlevel \levelnfc0 \levelnfcn0 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'06\'00.\'01.\'02.;}{\levelnumbers \'01\'03\'05;}\li1088
\lin1088 \fi-1088 \ri0 \rin0 }{\listlevel \levelnfc0 \levelnfcn0 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'08\'00.\'01.\'02.\'03.;}{\levelnumbers \'01\'03\'05\'07;}\li1308
\lin1308 \fi-1308 \ri0 \rin0 }{\listlevel \levelnfc0 \levelnfcn0 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'0a\'00.\'01.\'02.\'03.\'04.;}{\levelnumbers \'01\'03\'05\'07\'09;}\li1528
\lin1528 \fi-1528 \ri0 \rin0 }{\listlevel \levelnfc0 \levelnfcn0 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'0c\'00.\'01.\'02.\'03.\'04.\'05.;}{\levelnumbers \'01\'03\'05\'07\'09\'0b;}\li1748
\lin1748 \fi-1748 \ri0 \rin0 }{\listlevel \levelnfc0 \levelnfcn0 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'0e\'00.\'01.\'02.\'03.\'04.\'05.\'06.;}{\levelnumbers \'01\'03\'05\'07\'09\'0b\'0d;}\li1968
\lin1968 \fi-1968 \ri0 \rin0 }{\listlevel \levelnfc0 \levelnfcn0 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'10\'00.\'01.\'02.\'03.\'04.\'05.\'06.\'07.;}{\levelnumbers \'01\'03\'05\'07\'09\'0b\'0d\'0f;}\li2188
\lin2188 \fi-2188 \ri0 \rin0 }{\listlevel \levelnfc0 \levelnfcn0 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'12\'00.\'01.\'02.\'03.\'04.\'05.\'06.\'07.\'08.;}{\levelnumbers \'01\'03\'05\'07\'09\'0b\'0d\'0f\'11;}\li2408
\lin2408 \fi-2408 \ri0 \rin0 }{\listname ;}\listid1790318751 \nisuslistcontnum0 {\*\liststylename Tiered List;}}{\list \listhybrid {\listlevel \levelnfc0 \levelnfcn0 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'02\'00.;}{\levelnumbers \'01;}\li720
\lin720 \fi-432 \ri0 \rin0 }{\listlevel \levelnfc4 \levelnfcn4 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'02\'01.;}{\levelnumbers \'01;}\li1080
\lin1080 \fi-431 \ri0 \rin0 }{\listlevel \levelnfc2 \levelnfcn2 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'02\'02.;}{\levelnumbers \'01;}\li1440
\lin1440 \fi-431 \ri0 \rin0 }{\listlevel \levelnfc0 \levelnfcn0 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'03(\'03);}{\levelnumbers \'02;}\li1800
\lin1800 \fi-431 \ri0 \rin0 }{\listlevel \levelnfc4 \levelnfcn4 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'03(\'04);}{\levelnumbers \'02;}\li2160
\lin2160 \fi-431 \ri0 \rin0 }{\listlevel \levelnfc2 \levelnfcn2 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'03(\'05);}{\levelnumbers \'02;}\li2520
\lin2520 \fi-431 \ri0 \rin0 }{\listlevel \levelnfc0 \levelnfcn0 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'02\'06);}{\levelnumbers \'01;}\li2880
\lin2880 \fi-431 \ri0 \rin0 }{\listlevel \levelnfc4 \levelnfcn4 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'02\'07);}{\levelnumbers \'01;}\li3240
\lin3240 \fi-432 \ri0 \rin0 }{\listlevel \levelnfc2 \levelnfcn2 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'02\'08);}{\levelnumbers \'01;}\li3600
\lin3600 \fi-432 \ri0 \rin0 }{\listname ;}\listid1493869940 \nisuslistcontnum0 {\*\liststylename Number List;}}{\list \listsimple1 {\listlevel \levelnfc23 \levelnfcn23 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'01\u8226 ?;}{\levelnumbers ;}\li720
\lin720 \fi-500 \ri0 \rin0 }{\listname ;}\listid637850124 \nisuslistcontnum1 {\*\liststylename Bullet List 2;}}{\list \listhybrid {\listlevel \levelnfc4 \levelnfcn4 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'02\'00.;}{\levelnumbers \'01;}\li648
\lin648 \fi-360 \ri0 \rin0 }{\listlevel \levelnfc0 \levelnfcn0 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'02\'01.;}{\levelnumbers \'01;}\li1008
\lin1008 \fi-360 \ri0 \rin0 }{\listlevel \levelnfc2 \levelnfcn2 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'02\'02.;}{\levelnumbers \'01;}\li1368
\lin1368 \fi-360 \ri0 \rin0 }{\listlevel \levelnfc4 \levelnfcn4 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'03(\'03);}{\levelnumbers \'02;}\li1728
\lin1728 \fi-360 \ri0 \rin0 }{\listlevel \levelnfc0 \levelnfcn0 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'03(\'04);}{\levelnumbers \'02;}\li2088
\lin2088 \fi-360 \ri0 \rin0 }{\listlevel \levelnfc2 \levelnfcn2 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'03(\'05);}{\levelnumbers \'02;}\li2448
\lin2448 \fi-360 \ri0 \rin0 }{\listlevel \levelnfc4 \levelnfcn4 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'02\'06);}{\levelnumbers \'01;}\li2808
\lin2808 \fi-360 \ri0 \rin0 }{\listlevel \levelnfc0 \levelnfcn0 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'02\'07);}{\levelnumbers \'01;}\li3168
\lin3168 \fi-360 \ri0 \rin0 }{\listlevel \levelnfc2 \levelnfcn2 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'02\'08);}{\levelnumbers \'01;}\li3528
\lin3528 \fi-360 \ri0 \rin0 }{\listname ;}\listid1240764503 \nisuslistcontnum0 {\*\liststylename Lettered List;}}{\list \listsimple1 {\listlevel \levelnfc23 \levelnfcn23 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'01\u8226 ?;}{\levelnumbers ;}\li720
\lin720 \fi-500 \ri0 \rin0 }{\listname ;}\listid1554270776 \nisuslistcontnum1 {\*\liststylename Bullet List 1;}}{\list \listsimple1 {\listlevel \levelnfc23 \levelnfcn23 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'01\u8226 ?;}{\levelnumbers ;}\li720
\lin720 \fi-500 \ri0 \rin0 }{\listname ;}\listid1116666771 \nisuslistcontnum1 {\*\liststylename Bullet List 6;}}{\list \listhybrid {\listlevel \levelnfc23 \levelnfcn23 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'01\u8226 ?;}{\levelnumbers ;}\li648
\lin648 \fi-360 \ri0 \rin0 }{\listlevel \levelnfc23 \levelnfcn23 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'01\u8226 ?;}{\levelnumbers ;}\li1008
\lin1008 \fi-360 \ri0 \rin0 }{\listlevel \levelnfc23 \levelnfcn23 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'01\u8226 ?;}{\levelnumbers ;}\li1368
\lin1368 \fi-360 \ri0 \rin0 }{\listlevel \levelnfc23 \levelnfcn23 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'01\u8226 ?;}{\levelnumbers ;}\li1728
\lin1728 \fi-360 \ri0 \rin0 }{\listlevel \levelnfc23 \levelnfcn23 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'01\u8226 ?;}{\levelnumbers ;}\li2088
\lin2088 \fi-360 \ri0 \rin0 }{\listlevel \levelnfc23 \levelnfcn23 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'01\u8226 ?;}{\levelnumbers ;}\li2448
\lin2448 \fi-360 \ri0 \rin0 }{\listlevel \levelnfc23 \levelnfcn23 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'01\u8226 ?;}{\levelnumbers ;}\li2808
\lin2808 \fi-360 \ri0 \rin0 }{\listlevel \levelnfc23 \levelnfcn23 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'01\u8226 ?;}{\levelnumbers ;}\li3168
\lin3168 \fi-360 \ri0 \rin0 }{\listlevel \levelnfc23 \levelnfcn23 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'01\u8226 ?;}{\levelnumbers ;}\li3528
\lin3528 \fi-360 \ri0 \rin0 }{\listname ;}\listid1462789551 \nisuslistcontnum0 {\*\liststylename Bullet List;}}{\list \listsimple1 {\listlevel \levelnfc23 \levelnfcn23 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'01\u8226 ?;}{\levelnumbers ;}\li720
\lin720 \fi-500 \ri0 \rin0 }{\listname ;}\listid981747696 \nisuslistcontnum1 {\*\liststylename Bullet List 5;}}{\list \listsimple1 {\listlevel \levelnfc23 \levelnfcn23 \leveljcn0 \levelfollow0 \levelstartat1 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'01\u8226 ?;}{\levelnumbers ;}\li720
\lin720 \fi-500 \ri0 \rin0 }{\listname ;}\listid1026076958 \nisuslistcontnum1 {\*\liststylename Bullet List 4;}}{\list \listsimple1 {\listlevel \levelnfc0 \levelnfcn0 \leveljcn0 \levelfollow0 \levelstartat4 \nisuslevelnuminc1 \levelspace0 \levelindent0 {\leveltext \'02\'00.;}{\levelnumbers \'01;}\li720
\lin720 \fi-500 \ri0 \rin0 }{\listname ;}\listid711192801 \nisuslistcontnum1 {\*\liststylename Number List 2;}}}{\*\listoverridetable {\listoverride \listid1554270776 \listoverridecount1 {\lfolevel \listoverridestartat \levelstartat1 \nisuslistsoftoverridestartat }\ls1
}{\listoverride \listid1554270776 \listoverridecount0 \ls2 }{\listoverride \listid637850124 \listoverridecount1 {\lfolevel \listoverridestartat \levelstartat1 \nisuslistsoftoverridestartat }\ls3
}{\listoverride \listid637850124 \listoverridecount0 \ls4 }{\listoverride \listid108668244 \listoverridecount1 {\lfolevel \listoverridestartat \levelstartat1 \nisuslistsoftoverridestartat }\ls5
}{\listoverride \listid1026076958 \listoverridecount1 {\lfolevel \listoverridestartat \levelstartat1 \nisuslistsoftoverridestartat }\ls6 }{\listoverride \listid981747696 \listoverridecount1 {\lfolevel \listoverridestartat \levelstartat1 \nisuslistsoftoverridestartat }\ls7
}{\listoverride \listid1116666771 \listoverridecount1 {\lfolevel \listoverridestartat \levelstartat1 \nisuslistsoftoverridestartat }\ls8 }{\listoverride \listid958829064 \listoverridecount0 \ls9 }{\listoverride \listid322791560 \listoverridecount0 \ls10 }{\listoverride \listid108668244 \listoverridecount0 \ls11 }{\listoverride \listid614056598 \listoverridecount0 \ls12 }{\listoverride \listid1790318751 \listoverridecount0 \ls13 }{\listoverride \listid1493869940 \listoverridecount0 \ls14 }{\listoverride \listid1240764503 \listoverridecount0 \ls15 }{\listoverride \listid1116666771 \listoverridecount0 \ls16 }{\listoverride \listid1462789551 \listoverridecount0 \ls17 }{\listoverride \listid981747696 \listoverridecount0 \ls18 }{\listoverride \listid1026076958 \listoverridecount0 \ls19 }{\listoverride \listid711192801 \listoverridecount0 \ls20 }}\defformat {\info {\*\nisusgmtoffset -5:00}{\author  }{\creatim \yr2014 \mo2 \dy16 \hr19 \min49 }{\revtim \yr2014 \mo2 \dy16 \hr20 \min3 }{\printim \yr2014 \mo2 \dy16 \hr20 \min3 }}{\*\userprops }\viewkind1
\viewzk1 \nisusviewruler1 \nisusviewrulerh1 \nisusviewrulerv0 \nisusviewtoolbar1 \nisusviewtooldrawer1 \nisusviewpagenumtype1 \nisusviewrulericons0 {\*\nisusviewsettings \viewkind4 \viewscale125 }{\*\nisusviewsettings \viewkind1 \viewzk1 {\nisusnavsettings {\*\mode toc}{\*\closedtochandles }{\*\visible 0}}}{\*\nisuswindow \x299 \y120 \w840 \h720 }\nisusrulerunits0
\nshwinv1 \nshwpg1 \nisusinlinespell1 \hyphauto0 \hyphhotz10800 \nisusselectstart0 \nisusselectlength0 \ftnstart1 \ftnnar \aftnstart1 \aftnnar \aenddoc \fet2 \ftnbj \paperw12240 \paperh15840 \margl720 \margr720 \margt720 \margb720 \gutter0 \pgnstart1 \nocolbal \widowctrl \f0 \sectd \endnhere \sftnnar \saftnnar \linemod0 \cols1 \ltrsect \colbalsxn0 \pgwsxn12240 \pghsxn15840 \marglsxn720 \margrsxn720 \margtsxn720 \margbsxn720 \guttersxn0 \headery320 \footery320 \pgnstarts1 \pgnrestart \pgndec \sxnstarts1 \sxnrestart \sxndec {\header \plain \pard \s821 \f0\fs24 }{\footer \plain \pard \s823 \f0\fs24 }\deftab720
{\pard \nisusnos \nowidctlpar {\f1\fs48 \nisusselectcaret Senthil Kumaran, Python Design}{\par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 This is page describing various aspects of CPython Design. It is derived from Documents written by various authors who have researched on this topic, CPython Code and the PEPs. If you find anything lacking, please feel free to suggest the changes or corrections.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f2\fs36\b Python Internals}{\par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 This is a single page, python design notes from Yaniv Aknin\rquote s }}{\field {\*\fldinst HYPERLINK "http://tech.blog.aknin.name/category/my-projects/pythons-innards/"}{\fldrslt {\pard \nisusnos \nowidctlpar {\cs847 \f1\ul\ulc1\cf1 Python-Innards}}}}{\pard \nisusnos \nowidctlpar {\f1  Docs and other resources. I collected and wrote them so that I can understand and grasp the design principles. The material is possibly augumented with other resources.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f2\fs28\b Overview}{\par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Explains the Python\rquote s byte-code evaluation. For e.g, what happen\rquote s when you do\f0 \par
}}{\pard \nisusnos {\par
\tab \f1 python -c \ldblquote print(\lquote hello,world\rquote )\rdblquote \f0 \par
\par
}}{\pard \nisusnos \nowidctlpar {\f1 Python\rquote s binary is executed, the standard C library initialization happens and then the main function starts executing from \f3\fs20 ./Modules/python.c: main\f1\fs24 , which soon calls \f3\fs20 ./Modules/main.c: Py_Main\f1\fs24  and after some initialization stuff like parse arguments, see if environment variables should affect behaviour, assess the situation of the standard streams and act accordingly, etc, \f3\fs20 ./Python/pythonrun.c: Py_Initialize\f1\fs24  is called.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 In many ways, \f3\fs20 Py_Initialize\f1\fs24  function is what \lquote builds\rquote  and assembles together the pieces needed to run the CPython machine and makes \lquote a process\rquote  into \lquote a process with a Python interpreter in it\rquote . Among other things, it creates two very important Python data-structures: the interpreter state and thread state. It also creates the built-in module sys and the module which hosts all builtins.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 It will execute a single string, since we invoked it with -c. To execute this single string, \f3\fs20 ./Python/pythonrun.c: PyRun_SimpleStringFlags\f1\fs24  is called. This function creates the \f3\fs20 __main__\f1\fs24  namespace \lquote where\rquote  our string will be executed. After the namespace is created, the string is executed in it. To do that, you must first transform the string into something that machine can work on.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 The parser/compiler stage of \f3\fs20 PyRun_SimpleStringFlags\f1\fs24  goes largely like this: tokenize and create a Concrete Syntax Tree (CST) from the code, transform the CST into an Abstract Syntax Tree (AST) and finally compile the AST into a code object using \f3\fs20 ./Python/ast.c: PyAST_FromNode\f1\fs24 . The code object as a binary string of machine code that Python VM\rquote s \lquote machinary\rquote  can operate on \endash  so now we\rquote re ready to do interpretation (again, evaluation in Python\rquote s parlance).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 We have an empty \f3\fs20 __main__\f1\fs24 , we have a code object, we want to evaluate it. Now what? Now this line: \f3\fs20 Python/pythonrun.c: run_mod, v = PyEval_EvalCode(co, globals, locals);\f1\fs24  does the trick. It receives a code object and a namespace for globals and for locals (in this case, both of them will be the newly created \f3\fs20 __main__\f1\fs24  namespace), creates a frame object from these and executes it.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 We know that \f3\fs20 Py_Initialize\f1\fs24  creates a thread state. Get back to that, each Python thread is represented by its own thread state, which among other things points to the stack of currently executing frames. After the frame object is created and placed at the top of the thread state stack, the byte code pointed by it is evaluated, opcode by opcode, by means of the \f3\fs20 ./Python/ceval.c: PyEval_EvalFrameEx\f1\fs24 . \f3\fs20 PyEval_EvalFrameEx\f1\fs24  function takes the frame, extracts opcode after opcode, and corresponding operands, if any and executes a short piece of C code matching the opcode.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Opcode looks like this.:\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 >>> from dis import dis\par
>>> co = compile("spam = eggs - 1", "<string>", "exec")\par
>>> dis(co)\par
  1           0 LOAD_NAME                0 (eggs)\par
              3 LOAD_CONST               0 (1)\par
              6 BINARY_SUBTRACT\par
              7 STORE_NAME               1 (spam)\par
             10 LOAD_CONST               1 (None)\par
             13 RETURN_VALUE\par
>>>\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 You \ldblquote load\rdblquote  the name eggs (where do you load it from? where do you load it to?), and also load a constant value (1), then you do a \f3\fs20 \ldblquote binary subtract\rdblquote \f1\fs24  (what do you mean \lquote binary\rquote  in this context? between which operands?), and so on and so forth. The names are \ldblquote loaded\rdblquote  from the globals and locals namespaces we\rquote ve seen earlier, and they\rquote re loaded onto an operand stack (not to be confused with the stack of running frames), which is exactly where the binary subtract will pop them from, subtract one from the other, and put the result back on that stack.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Look at \f3\fs20 PyEval_EvalFrameEx at ./Python/ceval.c\f1\fs24 . The following piece of code is run when BINARY_SUBTRACT opcode is found.:\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 TARGET(BINARY_SUBTRACT)\par
    w = POP();\par
    v = TOP();\par
    x = PyNumber_Subtract(v, w);\par
    Py_DECREF(v);\par
    Py_DECREF(w);\par
    SET_TOP(x);\par
    if (x != NULL) DISPATCH();\par
    break;\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 After the frame is executed and \f3\fs20 PyRun_SimpleStringFlags\f1\fs24  returns, the main function does some cleanup (notably, \f3\fs20 Py_Finalize\f1\fs24 ), the standard C library deinitialization stuff is done (\f3\fs20 atexit\f1\fs24 ), and the process exits.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f2\fs28\b Python Objects}{\par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Objects are fundamental to the innards of python and Objects are not very tightly coupled with anything else in Python. Look at the implementation of objects as if they\rquote re unrelated to the \lquote rest\rquote , as if they\rquote re a general purpose C API for creating an object subsystem. Objects are just a bunch of structures and some functions to manipulate them.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Mostly everything in Python is an object, from integer to dictionaries, from user defined classes to built-in ones, from stack frames to code objects.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Given a pointer to a piece of memory, the very least you must expect of it to treat it as an object are just a couple of fields defined in a C structure called \f3\fs20 ./Objects/object.h: PyObject.\f1\fs24 :\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 typedef struct _object \{\par
    Py_ssize_t ob_refcnt;\par
    struct _typeobject *ob_type;\par
\} PyObject;\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Many objects extend this structure to accommodate other variables required to represent the object\rquote s value, but these two fields must always exist: a reference count and type (in special debug builds, a couple other esoteric fields are added to track references).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 The reference count is an integer which counts how many times the object is referenced. \f3\fs20 >>> a = b = c = object()\f1\fs24  instantiates an empty object and binds it to three different names: a, b and c. Each of these names creates another reference to it even though the object is allocated only once. Binding the object to yet another name or adding the object to a list will create another reference \endash  but will not create another object!\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 There is much more to say about reference counting, but that\rquote s less central to the overall object system and more related to Garbage Collection.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 We can now better understand the \f3\fs20 ./Objects/object.h: Py_DECREF\f1\fs24  macro we\rquote ve seen used in the introduction and didn\rquote t know how to explain: It simply decrements \f3\fs20 ob_refcnt\f1\fs24  (and initiates deallocation, if \f3\fs20 ob_refcnt\f1\fs24  hit zero). That\rquote s all we\rquote ll say about reference counting for now.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f3\fs20 ob_type\f1\fs24 , a pointer to an object\rquote s type, a central piece of Python\rquote s object model. Every object has exactly one type, which never changes during the lifetime of the object. Most importantly, the type of an object (and only the type of an object) determines what can be done with an object.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 When the interpreter evaluates the subtraction opcode, a single C function \f3\fs20 (PyNumber_Subtract)\f1\fs24  will be called regardless of whether its operands are an integer and an integer, an integer and a float or even something nonsensical (subtract an exception from a dictionary).:\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 # n2w: the type, not the instance, determines what can be done with an instance\par
>>> class Foo(object):\par
...     "I don't have __call__, so I can't be called"\par
...\par
>>> class Bar(object):\par
...     __call__ = lambda *a, **kw: 42\par
...\par
>>> foo = Foo()\par
>>> bar = Bar()\par
>>> foo()\par
Traceback (most recent call last):\par
  File "<stdin>", line 1, in <module>\par
TypeError: 'Foo' object is not callable\par
>>> bar()\par
42\par
# will adding __call__ to foo help?\par
>>> foo.__call__ = lambda *a, **kw: 42\par
>>> foo()\par
Traceback (most recent call last):\par
  File "<stdin>", line 1, in <module>\par
TypeError: 'Foo' object is not callable\par
# how about adding it to Foo?\par
>>> Foo.__call__ = lambda *a, **kw: 42\par
>>> foo()\par
42\par
>>>\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 How can a single C function be used to handle any kind of object that is thrown at it? It can receive a \f3\fs20 void * pointer\f1\fs24  (actually it receives a \f3\fs20 PyObject *\f1\fs24  pointer, which is also opaque insofar as the object\rquote s data is concerned), but how will it know how to manipulate the object it is given? In the object\rquote s type lies the answer. A type is in itself a Python object (it also has a reference count and a type of its own, the type of almost all types is type), but in addition to the refcount and the type of the type, there are many more fields in the C structure describing type objects.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f3\fs20 ./Include/object.h: PyTypeObject\f1\fs24  has the information about types as well as type\rquote s structure\rquote s definition. Many of the fields a type object has are called slots and they point to functions (or to structures that point to a bunch of related functions). These functions are what will actually be called when Python C-API functions are invoked to operate on an object instantiated from that type. So while you think you\rquote re calling \f3\fs20 PyNumber_Subtract\f1\fs24  on both a, say, \f3\fs20 int and a float\f1\fs24 , in reality what happens is that the types of it operands are \f3\fs20 dereferenced\f1\fs24  and the type-specific subtraction function in the \lquote subtraction\rquote  slot is used. So we see that the C-API functions aren\rquote t generic, but rather rely on types to abstract the details away and appear as if they can work on anything (valid work is also just to raise a TypeError).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f3\fs20 PyNumber_Subtract\f1\fs24  calls a generic two-argument function called \f3\fs20 ./Object/abstract.c: binary_op\f1\fs24 , and tells it to operate on the number-like \f3\fs20 slot nb_subtract\f1\fs24  (similar slots exists for other functionality, like, say, the number-like slot \f3\fs20 nb_negative\f1\fs24  or the sequence-like slot \f3\fs20 sq_length\f1\fs24 ). \f3\fs20 binary_op\f1\fs24  is an error-checking wrapper around \f3\fs20 binary_op1\f1\fs24 , the real \lquote do work\rquote  function. \f3\fs20 ./Objects/abstract.c: binary_op1\f1\fs24  receives \f3\fs20 BINARY_SUBTRACT\lquote s\f1\fs24  operands as v and w, and then tries to dereference \f3\fs20 v->ob_type->tp_as_number\f1\fs24 , a structure pointing to many numeric slots which represents how v can be used as a number. \f3\fs20 binary_op1\f1\fs24  will expect to find at \f3\fs20 tp_as_number->nb_subtract\f1\fs24  a C function that will either do the subtraction or return the special value \f3\fs20 Py_NotImplemented\f1\fs24 , to signal that these operands are \lquote insubtracticable\rquote  in relation to one another (this will cause a TypeError exception to be raised).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 If you want to change how objects behave, you can write an extension in C which will statically define its own \f3\fs20 PyObjectType\f1\fs24  structure in code and fill the slots away as you see fit. But when we create our own types in Python ( class and type are the same thing), we don\rquote t manually allocate a C structure and we don\rquote t fill up its slots.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 How come these types behave just like built-in types? The answer is inheritance, where typing plays a significant role. See, Python arrives with some built-in types, like \f3\fs20 list or dict\f1\fs24 . As we said, these types have a certain set of functions populating their slots and thus objects instantiated from them behave in a certain way, like a mutable sequence of values or like a mapping of keys to values. When you define a new type in Python, a new C structure for that type is dynamically allocated on the \f3\fs20 heap\f1\fs24  (like any other object) and its slots are filled from whichever type it is inheriting, which is also called its base\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Since the slots are copied over, the newly created sub-type has mostly identical functionality to its base. Python also arrives with a featureless base object type called object (\f3\fs20 PyBaseObject_Type\f1\fs24  in C), which has mostly null slots and which you can extend without inheriting any particular functionality. You never really \lquote create\rquote  a type in pure Python, you always inherit one (if you define a class without inheriting anything explicitly, you will implicitly inherit object; in Python 2.x, not inheriting anything explicitly leads to the creation of a so called \lquote classic class\rquote , which is out of our scope).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Of course, you don\rquote t have to inherit everything. You can, obviously, mutate the behaviour of a type created in pure Python, as I\rquote ve demonstrated in the code snippet earlier in this post. By setting the special method \f3\fs20 __call__\f1\fs24  on our class Bar, I made instances of that class callable. Someone, sometime during the creation of our class, noticed this \f3\fs20 __call__\f1\fs24  method exists and wired it into our newly created type\rquote s \f3\fs20 tp_call\f1\fs24  slot. \f3\fs20 ./Objects/typeobject.c: type_new\f1\fs24 , an elaborate and central function, is that function.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Let\rquote s look at a small line right at the end after the new type has been fully created and just before returning \f3\fs20 fixup_slot_dispatchers(type);\f1\fs24 . This function iterates over the correctly named methods defined for the newly created type and wires them to the correct slots in the type\rquote s structure, based on their particular name.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Another thing remains unanswered in the sea of small details: we\rquote ve demonstrated already that setting the method \f3\fs20 __call__\f1\fs24  on a type after it\rquote s created will also make objects instantiated from that type callable (even objects already instantiated from that type). Recall that a type is an object, and that the type of a type is type (if your head is spinning, try: \f3\fs20 >>> class Foo(list): pass ; type(Foo)\f1\fs24 ).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 So when we do stuff to a class, like calling a class, or subtracting a class, or, indeed, setting an attribute on a class, what happens is that the \f3\fs20 class\rquote  object\rquote s ob_type\f1\fs24  member is dereferenced, finding that the class\rquote  type is type. Then the \f3\fs20 type->tp_setattro\f1\fs24  slot is used to do the actual attribute setting. So a class, like an integer or a list can have its own attribute-setting function. And the type-specific attribute-setting function (\f3\fs20 ./Objects/typeobject.c: type_setattro\f1\fs24 ) calls the very same function that \f3\fs20 fixup_slot_dispatchers\f1\fs24  uses to actually do the fixup work (update_one_slot) after it has set a new attribute on a class.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 What is happening here?:\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 >>> a = object()\par
>>> class C(object): pass\par
...\par
>>> b = C()\par
>>> a.foo = 5\par
Traceback (most recent call last):\par
  File "<stdin>", line 1, in <module>\par
AttributeError: 'object' object has no attribute 'foo'\par
>>> b.foo = 5\par
>>>\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 How I can set an arbitrary attribute to b, which is an instance of C, which is a class inheriting object and not changing anything, and yet I can\rquote t do the same with a, an instance of that very same object? Some wise crackers can say: b has a \f3\fs20 __dict__\f1\fs24  and a doesn\rquote t, and that\rquote s true, but how did this new (and totally non-trivial!) functionality come from if I didn\rquote t inherit it?!\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f2\fs28\b Attributes of an object}{\par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 An object\rquote s attributes are other objects related to it and accessible by invoking the . (dot) operator, like so: \f3\fs20 >>> my_object.attribute_name\f1\fs24 . A type can define one (or more) specially named methods that will customize attribute access to its instances and they will be wired into the type\rquote s slots using \f3\fs20 fixup_slot_dispatchers\f1\fs24  when the type is created.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 These methods simply store the attribute as a key/value pair (attribute name/attribute value) in some object-specific dictionary when an attribute is set and retrieve the attribute from that dictionary when an attribute is get (or raise an AttributeError if the dictionary doesn\rquote t have a key matching the requested attribute\rquote s name).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Here is an example snippet which presents a particularly surprising behavior of attribute access.:\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 >>> print(object.__dict__)\par
\{'__ne__': <slot wrapper '__ne__' of 'object' objects>, ... ,\par
'__ge__': <slot wrapper '__ge__' of 'object' objects>\}\par
>>> object.__ne__ is object.__dict__['__ne__']\par
True\par
>>> o = object()\par
>>> o.__class__\par
<class 'object'>\par
>>> o.a = 1\par
Traceback (most recent call last):\par
  File "<stdin>", line 1, in <module>\par
AttributeError: 'object' object has no attribute 'a'\par
>>> o.__dict__\par
Traceback (most recent call last):\par
  File "<stdin>", line 1, in <module>\par
AttributeError: 'object' object has no attribute '__dict__'\par
>>> class C:\par
...     A = 1\par
...\par
>>> C.__dict__['A']\par
1\par
>>> C.A\par
1\par
>>> o2 = C()\par
>>> o2.a = 1\par
>>> o2.__dict__\par
\{'a': 1\}\par
>>> o2.__dict__['a2'] = 2\par
>>> o2.a2\par
2\par
>>> C.__dict__['A2'] = 2\par
Traceback (most recent call last):\par
  File "<stdin>", line 1, in <module>\par
TypeError: 'dict_proxy' object does not support item assignment\par
>>> C.A2 = 2\par
>>> C.__dict__['A2'] is C.A2\par
True\par
>>> type(C.__dict__) is type(o2.__dict__)\par
False\par
>>> type(C.__dict__)\par
<class 'dict_proxy'>\par
>>> type(o2.__dict__)\par
<class 'dict'>\par
>>>\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 We can see that object (as in, the most basic built-in type which we\rquote ve discussed before) has a private dictionary, and we see that stuff we access on object as an attribute is identical to what we find in \f3\fs20 object.__dict__\f1\fs24 . Instances of object (o, in the example) don\rquote t support arbitrary attribute assignment and don\rquote t have a \f3\fs20 __dict__\f1\fs24  at all, though they do support some attribute access (try \f3\fs20 o.__class__, o.__hash__\f1\fs24 , etc; these do return things).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 After that we created our own class, C, derived from object and adding an attribute A, and saw that A was accessible via \f3\fs20 C.A\f1\fs24  and \f3\fs20 C.__dict__['A']\f1\fs24  just the same, as expected.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 We then instantiated o2 from C, and demonstrated that as expected, attribute assignment on it indeed mutates its \f3\fs20 __dict__\f1\fs24  and vice versa (i.e., mutations to its \f3\fs20 __dict__\f1\fs24  are exposed as attributes). We were then probably more surprised to learn that even though attribute assignment on the class (C.A2) worked fine, our class\rquote  \f3\fs20 __dict__\f1\fs24  is actually read-only. Finally, we saw that our \f3\fs20 class __dict__\f1\fs24  is not of the same type as our object\rquote s \f3\fs20 __dict__\f1\fs24 , but rather an unfamiliar beast called dict_proxy. And if all that wasn\rquote t enough, recall the mystery from the end of Objects 101: if plain object instances like o have no \f3\fs20 __dict__\f1\fs24 , and C extends object without adding anything significant, why do instances of C like o2 suddenly do have a \f3\fs20 __dict__\f1\fs24 ?\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 First, we shall look at the implementation of a \f3\fs20 type\rquote s __dict__\f1\fs24 . Looking at the definition of \f3\fs20 PyObjectType\f1\fs24  (a zesty and highly recommended exercise), we see a slot called \f3\fs20 tp_dict\f1\fs24 , ready to accept a pointer to a dictionary. All types must have this slot, and all types have a dictionary placed there when \f3\fs20 ./Objects/typeobject.c: PyType_Ready\f1\fs24  is called on them, either when the interpreter is first initialized (remember \f3\fs20 Py_Initialize\f1\fs24 ? It invokes \f3\fs20 _Py_ReadyTypes\f1\fs24  which calls \f3\fs20 PyType_Ready\f1\fs24  on all known types) or when the type is created dynamically by the user (\f3\fs20 type_new\f1\fs24  calls \f3\fs20 PyType_Ready\f1\fs24  on the newborn type before returning).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 In fact, every name you bind within a class statement will turn up in the newly created type\rquote s \f3\fs20 __dict__\f1\fs24  (see \f3\fs20 ./Objects/typeobject.c: type_new: type->tp_dict = dict = PyDict_Copy(dict);\f1\fs24 ). These functions use the dictionary each type has and pointed to by \f3\fs20 tp_dict\f1\fs24  to store/retrieve the attributes, that is, getting attributes on a type is directly wired to dictionary assignment for the type instance\rquote s private dictionary pointed to by the type\rquote s structure. So far I hope it\rquote s been rather simple, and explains types\rquote  attribute retrieval.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f2\fs28\b Descriptors}{\par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Descriptors play a special role in instances\rquote  attribute access. An object is said to be a descriptor if it\rquote s type has one or two slots (tp_descr_get and/or tp_descr_set) filled with non-NULL value. These slots are wired to the special method names \f3\fs20 __get__\f1\fs24 , \f3\fs20 __set__\f1\fs24  and \f3\fs20 __delete__\f1\fs24 , when the type is defined in pure Python (i.e., if you create a class which has a \f3\fs20 __get__\f1\fs24  method it will be wired to its tp_descr_get slot, and if you instantiate an object from that class, the object is a descriptor).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 An object is said to be a data descriptor if its type has a non-NULL tp_descr_set slot (there\rquote s no particularly special term for a non-data descriptor). We\rquote ve defined descriptors, and we know how types\rquote  dictionaries and attribute access work. Most objects aren\rquote t types, that is to say, their type isn\rquote t type, it\rquote s something more mundane like int or dict or a user defined class. All these rely on generic attribute access functions, which are either set on the type explicitly or inherited from the type\rquote s base when the type is created.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 The generic attribute-getting function (\f3\fs20 PyObject_GenericGetAttr\f1\fs24 ) and its algorithm is like so:\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 (a) Search the accessed instance\rquote s type\rquote s dictionary, and then all the type\rquote s bases\rquote  dictionaries. If a data descriptor was found, invoke it\rquote s \f3\fs20 tp_desr_get\f1\fs24  function and return the results. If something else is found, set it aside (we\rquote ll call it X).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\tx220 {\f1 (b) Now search the object\rquote s dictionary, and if something is found, return it.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 (c) If nothing was found in the object\rquote s dictionary, inspect X, if one was set aside at all; if X is a non-data descriptor, invoke it\rquote s \f3\fs20 tp_descr_get\f1\fs24  function and return the result, and if it\rquote s a plain object it returns it.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\tx220 {\f1 (d) Finally, if nothing was found, it raise an \f3\fs20 AttributeError\f1\fs24  exception.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 So we learn that descriptors can execute code when they\rquote re accessed as an attribute (so when you do \f3\fs20 foo = o.a or o.a = foo\f1\fs24 , a runs code). A powerful notion, that, and it\rquote s used in several cases to implement some of Python\rquote s more \lquote magical\rquote  features.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Data-descriptors are even more powerful, as they take precedence over instance attributes (if you have an \f3\fs20 object o of class C\f1\fs24 , class C has a foo data-descriptor and o has a foo instance attribute, when you do o.foo the descriptor will take precedence).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 While descriptors are really important and you\rquote re advised to take the time to understand them, for brevity and due to the well written resources I\rquote ve just mentioned I will explain them no further, other than show you how they behave in the interpreter (super simple example!):\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 >>> class ShoutingInteger(int):\par
...     # __get__ implements the tp_descr_get slot\par
...     def __get__(self, instance, owner):\par
...             print('I was gotten from %s (instance of %s)'\par
...                   % (instance, owner))\par
...             return self\par
...\par
>>> class Foo:\par
...     Shouting42 = ShoutingInteger(42)\par
...\par
>>> foo = Foo()\par
>>> 100 - foo.Shouting42\par
I was gotten from <__main__.Foo object at 0xb7583c8c> (instance of <class __main__.'foo'>)\par
58\par
# Remember: descriptors are only searched on types!\par
>>> foo.Silent666 = ShoutingInteger(666)\par
>>> 100 - foo.Silent666\par
-566\par
>>>\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 We now understand that accessing attribute A on object O instantiated from class C1 which inherits C2 which inherits C3 can return A either from O, C1, C2 or C3, depending on something called the \f3\fs20 method resolution order\f1\fs24 . This way of resolving attributes, when coupled with slot inheritance, is enough to explain most of Python\rquote s inheritance functionality.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 We\rquote ve seen the definition of \f3\fs20 PyObject\f1\fs24 , and it most definitely didn\rquote t have a pointer to a dictionary, so where is the reference the object\rquote s dictionary stored? If you look closely at the definition of \f3\fs20 PyTypeObject\f1\fs24 , you will see a field called \f3\fs20 tp_dictoffset\f1\fs24 . This field provides a byte offset into the C-structure allocated for objects instantiated from this type; at this offset, a pointer to a regular Python dictionary should be found.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Under normal circumstances, when creating a new type, the size of the memory region necessary to allocate objects of that type will be calculated, and that size will be larger than the size of vanilla \f3\fs20 PyObject\f1\fs24 . The extra room will typically be used (among other things) to store the pointer to the dictionary (all this happens in \f3\fs20 ./Objects/typeobject.c\f1\fs24  : \f3\fs20 type_new, see may_add_dict = base->tp_dictoffset == 0\f1\fs24 ; onwards).:\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 >>> class C: pass\par
...\par
>>> o = C()\par
>>> o.foo = 'bar'\par
>>> o\par
<__main__.C object at 0x846b06c>\par
>>>\par
# break into GDB, see 'metablogging'->'tools' above\par
Program received signal SIGTRAP, Trace/breakpoint trap.\par
0x0012d422 in __kernel_vsyscall ()\par
(gdb) p ((PyObject *)(0x846b06c))->ob_type->tp_dictoffset\par
$1 = 16\par
(gdb) p *((PyObject **)(((char *)0x846b06c)+16))\par
$3 = \{u'foo': u'bar'\}\par
(gdb)\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 We have created a new class, instantiated an object from it and set some attribute on the object (o.foo = \lquote bar\rquote ), broke into gdb, dereferenced the object\rquote s type (C) and checked its \f3\fs20 tp_dictoffset\f1\fs24  (it was 16), and then checked what\rquote s to be found at the address pointed to by the pointer located at 16 bytes\rquote  offset from the object\rquote s C-structure, and indeed we found there a dictionary object with the key foo pointing to the value bar.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Of course, if you check \f3\fs20 tp_dictoffset\f1\fs24  on a type which doesn\rquote t have a \f3\fs20 __dict__\f1\fs24 , like object, you will find that it is zero. I define a class C inheriting object and doing nothing much else in Python, and then I instantiate o from that class, causing the extra memory for the dictionary pointer to be allocated at \f3\fs20 tp_dictoffset\f1\fs24 .\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 I then type in my interpreter \f3\fs20 o.__dict__\f1\fs24 , which byte-compiles to the \f3\fs20 LOAD_ATTR\f1\fs24  opcode, which causes the \f3\fs20 PyObject_GetAttr\f1\fs24  function to be called, which dereferences the type of o and finds the \f3\fs20 slot tp_getattro\f1\fs24 , which causes the default attribute searching mechanism described earlier in this post and implemented in \f3\fs20 PyObject_GenericGetAttr\f1\fs24 .\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 So when all that happens, what returns my object\rquote s dictionary? I know where the dictionary is stored, but I can see that \f3\fs20 __dict__\f1\fs24  isn\rquote t recursively inside itself, so there\rquote s a chicken and egg problem here; who gives me my dictionary when I access \f3\fs20 __dict__\f1\fs24  if it is not in my dictionary?\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Someone who has precedence over the object\rquote s dictionary \endash  a descriptor. Check this out:\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 >>> class C: pass\par
...\par
>>> o = C()\par
>>> o.__dict__\par
\{\}\par
>>> C.__dict__['__dict__']\par
<attribute '__dict__' of 'C' objects>\par
>>> type(C.__dict__['__dict__'])\par
<class 'getset_descriptor'>\par
>>> C.__dict__['__dict__'].__get__(o, C)\par
\{\}\par
>>> C.__dict__['__dict__'].__get__(o, C) is o.__dict__\par
True\par
>>>\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Seems like there\rquote s something called \f3\fs20 getset_descriptor\f1\fs24  (it\rquote s in \f3\fs20 ./Objects/typeobject.c\f1\fs24 ), which are groups of functions implementing the descriptor protocol and meant to be attached to an object placed in type\rquote s \f3\fs20 __dict__\f1\fs24 .\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 This descriptor will intercept all attribute access to \f3\fs20 o.__dict__\f1\fs24  on instances of this type, and will return whatever it wants, in our case, a reference to the dictionary found at the \f3\fs20 tp_dictoffset\f1\fs24  of o.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 This is also the explanation of the dict_proxy business we\rquote ve seen earlier. If in \f3\fs20 tp_dict\f1\fs24  there\rquote s a pointer to a plain dictionary, what causes it to be returned wrapped in this read only proxy, and why? The \f3\fs20 __dict__\f1\fs24  descriptor of the type\rquote s type type does it.:\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 >>> type(C)\par
<class 'type'>\par
>>> type(C).__dict__['__dict__']\par
<attribute '__dict__' of 'type' objects>\par
>>> type(C).__dict__['__dict__'].__get__(C, type)\par
<dict_proxy object at 0xb767e494>\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 This descriptor is a function that wraps the dictionary in a simple object that mimics regular dictionaries\rquote  behaviour but only allows read only access to the dictionary it wraps. And why is it so important to prevent people from messing with a \f3\fs20 type\rquote s __dict__\f1\fs24 ? Because a type\rquote s namespace might hold them specially named methods, like \f3\fs20 __sub__\f1\fs24 .\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 When you create a type with these specially named methods or when you set them on the type as an attribute, the function \f3\fs20 update_one_slot\f1\fs24  will patch these methods into one of the type\rquote s slots, as we\rquote ve seen in 101 for the subtraction operation. If you were to add these methods straight into the type\rquote s \f3\fs20 __dict__\f1\fs24 , they won\rquote t be wired to any slot, and you\rquote ll have a type that looks like it has a certain behaviour (say, has \f3\fs20 __sub__\f1\fs24  in its dictionary), but doesn\rquote t behave that way. \f3\fs20 __slots__\f1\fs24  are important construct when dealing with attributes access.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 descriptors are objects whose type has their tp_descr_get and/or tp_descr_set slots set to non-NULL. However, I also wrote, incorrectly, that descriptors take precedence over regular instance attributes (i.e., attributes in the object\rquote s \f3\fs20 __dict__\f1\fs24 ). This is partly correct but misleading, as it doesn\rquote t distinguish non-data descriptors from data-descriptors. An object is said to be a data descriptor if its type has its tp_descr_set slot implemented (there\rquote s no particularly special term for a non-data descriptor). Only data descriptors override regular object attributes, non-data descriptors do not.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f2\fs28\b Interpreter Threads}{\par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Look into the Interpreter State and the Thread State structures both implemented in ./Python/pystate.c In many operating systems user-space code is executed by an abstraction called threads that run inside another abstraction called processes. The kernel is in charge of setting up and tearing down these processes and execution threads, as well as deciding which thread will run on which logical CPU at any given time.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 When a process invokes Py_Initialize another abstraction comes into play, and that is the interpreter. Any Python code that runs in a process is tied to an interpreter, you can think of the interpreter as the root of all other concepts we\rquote ll discuss. Python\rquote s code base supports initializing two (or more) completely separate interpreters that share little state with one another. This is rather rarely done (never in the vanilla executable), because too much subtly shared state of the interpreter core and of C extensions exists between these \lquote insulated\rquote  interpreters.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Anyhow, we said all execution of code occurs in a thread (or threads), and Python\rquote s Virtual Machine is no exception. However, Python\rquote s Virtual Machine itself is something which supports the notion of threading, so Python has its own abstraction to represent Python threads. This abstraction\rquote s implementation is fully reliant on the kernel\rquote s threading mechanisms, so both the kernel and Python are aware of each Python thread and Python threads execute as separate kernel-managed threads, running in parallel with all other threads in the system. Uhm, almost.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Many aspects of Python\rquote s CPython implementation are not thread safe. This is has some benefits, like simplifying the implementation of easy-to-screw-up pieces of code and guaranteed atomicity of many Python operations, but it also means that a mechanism must be put in place to prevent two (or more) Pythonic The GIL is a process-wide lock which must be held by a thread if it wants to do anything Pythonic \endash  effectively limiting all such work to a single thread running on a single logical CPU at a time. Threads in Python multitask cooperatively by relinquishing the GIL voluntarily so other threads can do Pythonic work; this cooperation is built-in to the evaluation loop, so ordinarily authors of Python code and some extensions don\rquote t need to do something special to make cooperation work (from their point of view, they are preempted).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Do note that while a thread doesn\rquote t use any of Python\rquote s APIs it can (and many threads do) run in parallel to another Pythonic thread. With the concepts of a process (OS abstraction), interpreter(s) (Python abstraction) and threads (an OS abstraction and a Python abstraction) in mind, let\rquote s go inside-out by zooming out from a single opcode outwards to the whole process.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Let\rquote s look again at the disassembly of the bytecode generated for the simple statement \f3\fs20 spam = eggs - 1\f1\fs24 :\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 # uses 'diss'? tool.\par
>>> diss("spam = eggs - 1")\par
  1           0 LOAD_NAME                0 (eggs)\par
              3 LOAD_CONST               0 (1)\par
              6 BINARY_SUBTRACT\par
              7 STORE_NAME               1 (spam)\par
             10 LOAD_CONST               1 (None)\par
             13 RETURN_VALUE\par
>>>\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 In addition to the actual \lquote do work\rquote  opcode BINARY_SUBTRACT, we see opcodes like LOAD_NAME (eggs) and STORE_NAME (spam). It seems obvious that evaluating such opcodes requires some storage room: eggs has to be loaded from somewhere, spam has to be stored somewhere.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 The inner-most data structures in which evaluation occurs are the frame object and the code object, and they point to this storage room. When you\rquote re \ldblquote running\rdblquote  Python code, you\rquote re actually evaluating frames (recall \f3\fs20 ceval.c: PyEval_EvalFrameEx\f1\fs24 ).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 In this code-structure-oriented post, the main thing we care about is the \f3\fs20 f_back\f1\fs24  field of the frame object (though many others exist). In \f3\fs20 frame n\f1\fs24  this field points to frame n-1, i.e., the frame that called us (the first frame that was called in any particular thread, the top frame, points to NULL). This stack of frames is unique to every thread and is anchored to the thread-specific structure \f3\fs20 ./Include.h/pystate.h: PyThreadState\f1\fs24 , which includes a pointer to the currently executing frame in that thread (the most recently called frame, the bottom of the stack).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 PyThreadState is allocated and initialized for every Python thread in a process by \f3\fs20 _PyThreadState_Prealloc\f1\fs24  just before new thread creation is actually requested from the underlying OS (see \f3\fs20 ./Modules/_threadmodule.c: thread_PyThread_start_new_thread\f1\fs24  and \f3\fs20 >>> from _thread import start_new_thread\f1\fs24 ). Threads can be created which will not be under the interpreter\rquote s control; these threads won\rquote t have a \f3\fs20 PyThreadState\f1\fs24  structure and must never call a Python API. This isn\rquote t so common in a Python application but is more common when Python is embedded into another application. It is possible to \lquote Pythonize\rquote  such foreign threads that weren\rquote t originally created by Python code in order to allow them to run Python code (PyThreadState will have to be allocated for them). Finally, a bit like all frames are tied together in a backward-going stack of previous-frame pointers, so are all thread states tied together in a linked list of \f3\fs20 PyThreadState *next\f1\fs24  pointers.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 The list of thread states is anchored to the interpreter state structure which owns these threads. The interpreter state structure is defined at \f3\fs20 ./Include.h/pystate.h: PyInterpreterState\f1\fs24 , and it is created when you call \f3\fs20 Py_Initialize\f1\fs24  to initialize the Python VM in a process or \f3\fs20 Py_NewInterpreter\f1\fs24  to create a new interpreter state for multi-interpreter processes. Note carefully that \f3\fs20 Py_NewInterpreter\f1\fs24  does not return an interpreter state \endash  it returns a (newly created) \f3\fs20 PyThreadState\f1\fs24  for the single automatically created thread of the newly created interpreter.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 There\rquote s no sense in creating a new interpreter state without at least one thread in it, much like there\rquote s no sense in creating a new process with no threads in it.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Similarly to the list of threads anchored to its interpreter, so does the interpreter structure have a next field which forms a list by linking the interpreters to one another.This pretty much sums up our zooming out from the resolution of a single opcode to the whole process: opcodes belong to currently evaluating code objects (currently evaluating is specified as opposed to code objects which are just lying around as data, waiting for the opportunity to be called), which belong to currently evaluating frames, which belong to Pythonic threads, which belong to interpreters. The anchor which holds the root of this structure is the static variable \f3\fs20 ./Python/pystate.c: interp_head\f1\fs24 , which points to the first interpreter state (through that all interpreters are reachable, through each of them all thread states are reachable, and so fourth).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 The mutex \f3\fs20 head_mutex\f1\fs24  protects \f3\fs20 interp_head\f1\fs24  and the lists it points to so they won\rquote t be corrupt by concurrent modifications from multiple threads (I want it to be clear that this lock is not the GIL, it\rquote s just the mutex for interpreter and thread states). The macros \f3\fs20 HEAD_LOCK\f1\fs24  and \f3\fs20 HEAD_UNLOCK\f1\fs24  control this lock. \f3\fs20 interp_head\f1\fs24  is typically used when one wishes to add/remove interpreters or threads and for special purposes. That\rquote s because accessing an interpreter or a thread through the head variable would get you an interpreter state rather than the interpreter state owning the currently running thread (just in case there\rquote s more than one interpreter state).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 A more useful variable similar to interp_head is \f3\fs20 ./Python/pystate.c: _PyThreadState_Current\f1\fs24  which points to the currently running thread state This is how code typically accesses the correct interpreter state for itself: first find its your own thread\rquote s thread state, then dereference its interp field to get to your interpreter.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 There are a couple of functions that let you access this variable (get its current value or swap it with a new one while retaining the old one) and they require that you hold the GIL to be used. This is important, and serves as an example of CPython\rquote s lack of thread safety (a rather simple one, others are hairier). If two threads are running and there was no GIL, to which thread would this variable point? \ldblquote The thread that holds the GIL\rdblquote  is an easy answer, and indeed, the one that\rquote s used. \f3\fs20 _PyThreadState_Current\f1\fs24  is set during Python\rquote s initialization or during a new thread\rquote s creation to the thread state structure that was just created. When a Pythonic thread is bootstrapped and starts running for the very first time it can assume two things:\f0 \par
}}{\pard \nisusnos {\par
}}{\listtext {\pard \nisusnos \nowidctlpar\li720\lin720\fi-720\ri0\rin0\tx220\tx720 {\f1 \bullet \tab }}}{\pard \nisusnos \nowidctlpar\ls1\ilvl0\li720\lin720\fi-720\ri0\rin0\tx220\tx720 {\f1 It holds the GIL and\f0 \par
}}{\pard \nisusnos {\par
}}{\listtext {\pard \nisusnos \nowidctlpar\li720\lin720\fi-720\ri0\rin0\tx220\tx720 {\f1 \bullet \tab }}}{\pard \nisusnos \nowidctlpar\ls2\ilvl0\li720\lin720\fi-720\ri0\rin0\tx220\tx720 {\f1 It will find a correct value in _PyThreadState_Current.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 As of that moment the Pythonic thread should not relinquish the GIL and let other threads run without first storing \f3\fs20 _PyThreadState_Current\f1\fs24  somewhere, and should immediately re-acquire the GIL and restore \f3\fs20 _PyThreadState_Current\f1\fs24  to its old value when it wants to resume running Pythonic code. This behaviour is what keeps \f3\fs20 _PyThreadState_Current\f1\fs24  correct for GIL-holding threads and is so common that macros exist to do the save-release/acquire-restore idioms (\f3\fs20 Py_BEGIN_ALLOW_THREADS\f1\fs24  and \f3\fs20 Py_END_ALLOW_THREADS\f1\fs24 ). There\rquote s much more to say about the GIL and additional APIs to handle it and it\rquote s probably also interesting to contrast it with other Python implementation (Jython and IronPython are thread safe and do run Pythonic threads concurrently).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Diagram shows the relation between the state structures within a single process hosting Python as described so far. We have in this example two interpreters with two threads each, you can see each of these threads points to its own call stack of frames.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 {\*\shppict {\pict {\*\nisusfilename states4.png}\picw440
\pich315 \picwgoal8800 \pichgoal6300 {\*\picprop {\sp {\sn fillOpacity}{\sv 65536}}}{\sp {\sn fShadow}{\sv 0}}{\*\nisuspicprops {\sp {\sn dxWrapDistLeft}{\sv 0}}{\sp {\sn dyWrapDistTop}{\sv 0}}{\sp {\sn dxWrapDistRight}{\sv 0}}{\sp {\sn dyWrapDistBottom}{\sv 0}}}\pngblip
}}\par
Interpreter states contain several fields dealing with imported modules of that particular interpreter, so we can talk about that when we talk about importing.\f0
\par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 In addition to managing imports they hold bunch of pointers related to handling Unicode codecs, a field to do with dynamic linking flags and a field to do with TSC usage for profiling. Thread states have more fields but to me they were more easily understood. Not too surprisingly, they have fields that deal with things that relate to the execution flow of a particular thread and are of too broad a scope to fit particular frame.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Take for example the fields recursion_depth, overflow and recursion_critical, which are meant to trap and raise a RuntimeError during overly deep recursions before the stack of the underlying platform is exhausted and the whole process crashes. In addition to these fields, this structure accommodates fields related to profiling and tracing, exception handling (exceptions can be thrown across frames), a general purpose per-thread dictionary for extensions to store arbitrary stuff in and counters to do with deciding when a thread ran too much and should voluntarily relinquish the GIL to let other threads run.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f2\fs28\b Naming}{\par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Discuss naming, which is the ability to bind names to an object, like we can see in the statement \f3\fs20 a = 1\f1\fs24  (in other words, this article is roughly about what many languages call variables). Naturally, naming is central to Python\rquote s behaviour and understanding both its semantics and mechanics are important precursors to our quickly approaching discussions of code evaluation, code objects and stack frames.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 That said, it is also a delicate subject because anyone with some programming experience knows something about it, at least instinctively (you\rquote ve done something like a = 1 before, now haven\rquote t you?).When we evaluate a = b = c = [], we create one list and give it three different names. In formal terms, we\rquote d say that the newly instantiated list object is now bound to three identifiers that refer to it. This distinction between names and the objects bound to them is important. If we evaluate a.append(1), we will see that b and c are also affected; we didn\rquote t mutate a, we mutated its referent, so the mutation is uniformly visible via any name the object was referred to.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 On the other hand, if we will now do a \f3\fs20 b = []\f1\fs24 , a and c will not change, since we didn\rquote t actually change the object which b referred to but rather did a re-binding of the name b to a (newly created and empty) list object. Also recall that binding is one of the ways to increase the referent\rquote s reference count, this is worthy of noting even though reference counting isn\rquote t our subject at the moment.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 A name binding is commonly created by use of the assignment statement, which is a statement that has an \lquote equals\rquote  symbol (=) in the middle, \ldblquote stuff to assign to\rdblquote  or targets on the left, and \ldblquote stuff to be assigned\rdblquote  (an expression) on the right. A target can be a name (more formally called an identifier) or a more complex construct, like a sequence of names, an attribute reference (primary_name.attribute) or a subscript (primary_name[subscript])\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Name binding is undone with the deletion statement del, which is roughly \ldblquote del followed by comma-separated targets to unbind\rdblquote \f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Finally, note that name binding can be done without an assignment as bindings are also created by \f3\fs20 def, class, import (and others)\f1\fs24 , this is also of less importance to us now.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Scope is a term relating to the visibility of an identifier throughout a block, or a piece of Python code executed as a unit: a module, a function body and a class definition are blocks (control-blocks like those of if and while are not code blocks in Python). A namespace is an abstract environment where the mapping between names and the objects they refer to is made (incidentally, in current CPython, this is indeed implemented with the dict mapping type). The rules of scoping determine in which namespace will a name be sought after when it is used, or rather resolved.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 You probably know instinctively that a name bound in function foo isn\rquote t visible in an unrelated function bar, this is because by default names created in a function will be stored in a namespace that will not be looked at when name resolution happens in another, unrelated function.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Scope determines not just when a name will be visible as it is resolved or \lquote read\rquote  (i.e., if you do spam = eggs, where will eggs come from) but also as it is bound or \lquote written\rquote  (i.e., in the same example, where will spam go to). When a namespace will no longer be used (for example, the private namespace of a function which returns) all the names in it are unbound (this triggers reference count decrease and possibly deallocation, but this doesn\rquote t concern us now).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Scoping rules change based on the lexical context in which code is compiled. For example, in simpler terms, code compiled as a plain function\rquote s body will resolve names slightly differently when evaluated when compared with code compiled as part of a module\rquote s initialization code (the module top-level code). Special statements like global and nonlocal exist and can be applied to names thus that resolution rules for these names will change in the current code block, we\rquote ll look into that later.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 When Python code is evaluated, it is evaluated within three namespaces: locals, globals and builtins. When we resolve a name, it will be sought after in the local scope, then the global scope, then the builtin scope (then a NameError will be raised). When we bind a name with a name binding statement (i.e., an assignment, an import, a def, etc) the name will be bound in the local scope, and hide any existing names in the global or builtin scope.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 This hiding does not mean the hidden name was changed (formally: the hidden name was not re-bound), it just means it is no longer visible in the current block\rquote s scope because the newly created binding in the local namespace overshadows it.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 We said scoping changes according to context, and one such case is when functions are lexically nested within one another (that is, a function defined inside the body of another function): resolution of a name from within a nested function will first search in that function\rquote s scope, then in the local scopes of its outer function(s) and only then proceed normally (in the globals and builtins) scope.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Lexical scoping is an interesting behaviour, let\rquote s look at it closely:\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 $ cat scoping.py ; python3.1\par
def outer():\par
    a = 1\par
    # creating a lexically nested function bar\par
    def inner():\par
        # a is visible from outer's locals\par
        return a\par
    b = 2 # b is here for an example later on\par
    return inner\par
\par
# inner_nonlexical will be called from within\par
#  outer_nonlexical but it is not lexically nested\par
def inner_nonlexical():\par
    return a # a is not visible\par
def outer_nonlexical():\par
    a = 1\par
    inner = inner_nonlexical\par
    b = 2 # b is here for an example later on\par
    return inner_nonlexical\par
>>> from scoping import *\par
>>> outer()()\par
1\par
>>> outer_nonlexical()()\par
Traceback (most recent call last):\par
  File "<stdin>", line 1, in <module>\par
  File "scoping.py", line 13, in inner_nonlexical\par
    return a # a is not visible\par
>>>\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 As the example demonstrates, a is visible in the lexically nested inner but not in the call-stack nested but not lexically nested inner_nonlexical. I mean, Python is dynamic, everything is runtime, how does inner_nonlexical fail if it has the same Python code and is called in a similar fashion from within a similar environment as the original inner was called?\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Further more, we can see that \f3\fs20 inner\f1\fs24  is actually called after \f3\fs20 outer\f1\fs24  has terminated: how can it use a value from a namespace that was already destroyed?\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Once again, let\rquote s look at the bytecode emitted for the simple statement \f3\fs20 spam = eggs - 1\f1\fs24 :\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 >>> diss("spam = eggs - 1")\par
  1           0 LOAD_NAME                0 (eggs)\par
              3 LOAD_CONST               0 (1)\par
              6 BINARY_SUBTRACT\par
              7 STORE_NAME               1 (spam)\par
             10 LOAD_CONST               1 (None)\par
             13 RETURN_VALUE\par
>>>\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Recall that BINARY_SUBTRACT will pop two arguments from the value-stack and feed them to \f3\fs20 PyNumber_Subtract\f1\fs24 , which is a C function that accepts two \f3\fs20 PyObject * pointers\f1\fs24  and certainly doesn\rquote t know anything about scoping.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 What gets the arguments onto the stack are the \f3\fs20 LOAD_NAME\f1\fs24  and \f3\fs20 LOAD_CONST\f1\fs24  opcodes, and what will take the result out of the stack and into wherever it is heading is the \f3\fs20 STORE_NAME\f1\fs24  opcode. It is opcodes like this that implement the rules of naming and scoping, since the C code implementing them is what will actually look into the dictionaries representing the relevant namespaces trying to resolve the name and bring the resulting object unto the stack, or store whatever object is to be stored into the relevant namespace.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 For example, take \f3\fs20 LOAD_CONST\f1\fs24 ; this opcode loads a constant value unto the value stack, but it isn\rquote t about scoping (constants don\rquote t have a scope, by definition they aren\rquote t variables and they\rquote re never \lquote hidden\rquote ).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Fortunately for you, I\rquote ve already grepped the sources for \lquote suspect\rquote  opcodes ($ egrep -o \lquote (LOAD|STORE)(_[A-Z]+)+\rquote  Include/opcode.h | sort) and believe I\rquote ve mapped out the opcodes that actually implement scoping, so we can concentrate on the ones that really implement scoping. Note that among the list of opcodes I chose not to address are the ones that handles attribute reference and subscripting; I chose so since these opcodes rely on a different opcode to get the primary reference (the name before the dot or the square brackets) on the value stack and thus aren\rquote t really about scoping.\f0 \par
}}{\pard \nisusnos {\par
}}{\listtext {\pard \nisusnos \nowidctlpar\li720\lin720\fi-720\ri0\rin0\tx220\tx720 {\f1 \bullet \tab }}}{\pard \nisusnos \nowidctlpar\ls3\ilvl0\li720\lin720\fi-720\ri0\rin0\tx220\tx720 {\f1 \bullet }{\f1 We should discuss four pairs of opcode:\line \f3\fs20 LOAD_NAME and STORE_NAME\par
}}{\listtext {\pard \nisusnos \nowidctlpar\li720\lin720\fi-720\ri0\rin0\tx220\tx720 {\f3\fs20 \bullet \tab }}}{\pard \nisusnos \nowidctlpar\ls4\ilvl0\li720\lin720\fi-720\ri0\rin0\tx220\tx720 {\f3\fs20 LOAD_FAST and STORE_FAST\par
}}{\listtext {\pard \nisusnos \nowidctlpar\li720\lin720\fi-720\ri0\rin0\tx220\tx720 {\f3\fs20 \bullet \tab }}}{\pard \nisusnos \nowidctlpar\ls4\ilvl0\li720\lin720\fi-720\ri0\rin0\tx220\tx720 {\f3\fs20 LOAD_GLOBAL and STORE_GLOBAL\par
}}{\listtext {\pard \nisusnos \nowidctlpar\li720\lin720\fi-720\ri0\rin0\tx220\tx720 {\f3\fs20 \bullet \tab }}}{\pard \nisusnos \nowidctlpar\ls4\ilvl0\li720\lin720\fi-720\ri0\rin0\tx220\tx720 {\f3\fs20 LOAD_DEREF and STORE_DEREF\par
}}{\listtext {\pard \nisusnos \nowidctlpar\li720\lin720\fi-720\ri0\rin0\tx220\tx720 {\f3\fs20 \bullet \tab }}}{\pard \nisusnos \nowidctlpar\ls4\ilvl0\li720\lin720\fi-720\ri0\rin0\tx220\tx720 {\f3\fs20 \line \f1\fs24 \line \f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 I suggest we discuss each pair along with the situations in which the compiler chooses to emit an opcode of that pair in order to satisfy the semantics of scoping.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 This is not necessarily an exhaustive listing of these opcodes\rquote  uses (it might be, I\rquote m not checking if it is or isn\rquote t), but it should develop an understanding of these opcodes\rquote  behaviour and allow us to figure out other cases where the compiler chooses the emit them on our own; so if you ever see any of these in a disassembly, you\rquote ll be covered.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 I\rquote d like to begin with the obvious pair, \f3\fs20 *_NAME\f1\fs24 ; it is simple to understand (and I suspect it was the first to be implemented). Explaining the \f3\fs20 *_NAME\f1\fs24  pair of opcodes is easiest by writing rough versions of them in Python-like psuedocode (you can and should read the actual implementation in \f3\fs20 ./Python/ceval.c: PyEval_EvalFrameEx\f1\fs24 ):\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 def LOAD_NAME(name):\par
    try:\par
        return current_stack_frame.locals[name]\par
    except KeyError:\par
        try:\par
            return current_stack_frame.globals[name]\par
        except KeyError:\par
            try:\par
                return current_stack_frame.builtins[name]\par
            except KeyError:\par
                raise NameError('name %r is not defined'\par
                                 % name)\par
\par
def STORE_NAME(name, value):\par
    current_stack_frame.locals[name] = value\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 While they are the \lquote vanilla\rquote  case, \f3\fs20 *_NAME\f1\fs24 , in some cases they are not emitted at all as more specialized opcodes can achieve the same functionality in a faster manner. As we explore the other scoping-related opcodes, we will see why. A commonly used pair of scoping related opcodes is the \f3\fs20 *_FAST\f1\fs24  pair, which were originally implemented a long time ago as a speed enhancement over the \f3\fs20 *_NAME\f1\fs24  pair.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 These opcodes are used in cases where compile time analysis can infer that a variable is used strictly in the local namespace. This is possible when compiling code which is a part of a function, rather than, say, at the module level (some subtleties apply about the meaning of \lquote function\rquote  in this context, a class\rquote  body may also use these opcodes under some circumstances, but this is of no interest to us at the moment; also see the comments below).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 If we can decide at compile time which names are used in precisely one namespace, and that namespace is private to one code block, it may be easy to implement a namespace with cheaper machinery than dictionaries. Indeed, these opcodes rely on a local namespace implemented with a statically sized array, which is far faster than a dictionary lookup as in the global namespace and other namespaces.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 In Python 2.x it was possible to confuse the compiler thus that it will not be able to use these opcodes in a particular function and have to revert to \f3\fs20 *_NAME\f1\fs24 , this is no longer possible in Python 3.x (also see the comments).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Let\rquote s look at the two \f3\fs20 *_GLOBAL\f1\fs24  opcodes. LOAD_GLOBAL (but not STORE_GLOBAL) is also generated when the compiler can infer that a name is resolved in a function\rquote s body but was never bound inside that body.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 This behaviour is conceptually similar to the ability to decide when a name is both bound and resolved in a function\rquote s body, causing the generation of the \f3\fs20 *_FAST\f1\fs24  opcodes as we\rquote ve seen above:\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 >>> def func():\par
...     a = 1\par
...     a = b\par
...     return a\par
...\par
>>> diss(func)\par
  2           0 LOAD_CONST               1 (1)\par
              3 STORE_FAST               0 (a)\par
  3           6 LOAD_GLOBAL              0 (b)\par
              9 STORE_FAST               0 (a)\par
  4          12 LOAD_FAST                0 (a)\par
             15 RETURN_VALUE\par
>>>\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 As described for \f3\fs20 *_FAST\f1\fs24 , we can see that a was bound within the function, which places it in the local scope private to this function, which means the \f3\fs20 *_FAST\f1\fs24  opcodes can and are used for a. On the other hand, we can see (and the compiler could also see\u8230 ?) that b was resolved before it was ever bound in the function.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 The compiler figured it must either exist elsewhere or not exist at all, which is exactly what \f3\fs20 LOAD_GLOBAL\f1\fs24  does: it bypasses the local namespace and searches only the \f3\fs20 global\f1\fs24  and \f3\fs20 builtin\f1\fs24  namespaces (and then raises a \f3\fs20 NameError\f1\fs24 ).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 This explanation leaves us with missing functionality: what if you\rquote d like to re-bind a variable in the global scope? Recall that binding a new name normally binds it locally, so if you have a module defining foo = 1, a function setting foo = 2 locally \ldblquote hides\rdblquote  the global foo.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 But what if you want to re-bind the global foo? Note this is not to mutate object referred to by foo but rather to bind the name foo in the global scope to a different referent; if you\rquote re not clear on the distinction between the two, skim back in this post until we\rquote re on the same page.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 To do so, we can use the global statement which we mentioned in passing before; this statement lets you tell the compiler to treat a name always as a global both for resolving and for binding within a particular code block, generating only \f3\fs20 *_GLOBAL\f1\fs24  opcodes for manipulation of that name.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 When binding is required, \f3\fs20 STORE_GLOBAL\f1\fs24  performs the new binding (or a re-binding) in the global namespace, thus allowing Python code to explicitly state which variables should be stored and manipulated in the global scope. What happens if you use a variable locally, and then use the global statement to make it global? Let\rquote s look (slightly edited):\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 >>> def func():\par
...     a = 1\par
...     global a\par
...\par
<stdin>:3: SyntaxWarning: name 'a' is assigned to before global declaration\par
>>> diss(func)\par
  2           0 LOAD_CONST               1 (1)\par
              3 STORE_GLOBAL             0 (a)\par
  3           6 LOAD_CONST               0 (None)\par
              9 RETURN_VALUE\par
>>>\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 The compiler still treats the name as a global all through the code block, but warns you not to shoot yourself (and other maintainers of the code) in the foot. Sensible.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 We are left only with \f3\fs20 LOAD_DEREF\f1\fs24  and \f3\fs20 STORE_DEREF\f1\fs24 . To explain these, we have to revisit the notion of lexical scoping, which is what started our inspection of the implementation. Recall that we said that nested functions\rquote  resolution of names tries the namespaces\rquote  of all lexically enclosing functions (in order, innermost outwards) before it hits the global namespace, we also saw an example of that in code.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 So how did inner return a value resolved from this no-longer-existing namespace of outer? When resolution of names is attempted in the global namespace (or in builtins), the name may or may not be there, but for sure we know that the scope is still there! How do we resolve a name in a scope which doesn\rquote t exist?\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 The answer is quite nifty, and becomes apparent with a disassembly (slightly edited) of both functions:\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 # see the example above for the contents of scoping.py\par
>>> from scoping import *\par
# recursion added to 'diss'; you can see metablogging->tools above\par
>>> diss(outer, recurse=True)\par
  2           0 LOAD_CONST               1 (1)\par
              3 STORE_DEREF              0 (a)\par
  3           6 LOAD_CLOSURE             0 (a)\par
              9 BUILD_TUPLE              1\par
             12 LOAD_CONST               2 (<code object inner ...)\par
             15 MAKE_CLOSURE             0\par
             18 STORE_FAST               0 (inner)\par
  5          21 LOAD_CONST               3 (2)\par
             24 STORE_FAST               1 (b)\par
  6          27 LOAD_FAST                0 (inner)\par
             30 RETURN_VALUE\par
\par
recursing into <code object inner ...>:\par
  4           0 LOAD_DEREF               0 (a)\par
              3 RETURN_VALUE\par
>>>\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 We can see that outer (the outer function!) already treats a, the variable which will be used outside of its scope, differently than it treats b, a \lquote simple\rquote  variable in its local scope.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f3\fs20 a\f1\fs24  is loaded and stored using the \f3\fs20 *_DEREF\f1\fs24  variants of the loading and storing opcodes, in both the outer and inner functions. The secret sauce here is that at compilation time, if a variable is seen to be resolved from a lexically nested function, it will not be stored and will not be accessed using the regular naming opcodes. Instead, a special object called a cell is created to store the value of the object. When various code objects (the outer function, the inner function, etc) will access this variable, the use of the \f3\fs20 *_DEREF\f1\fs24  opcodes will cause the cell to be accessed rather than the namespace of the accessing code object. Since the cell is actually accessed only after outer has finished executing, you could even define inner before a was defined, and it would still work just the same (!).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 This is automagical for name resolution, but for outer scope rebinding the nonlocal statement exists. nonlocal was decreed by PEP 3014 and it is somewhat similar to the global statement\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f3\fs20 nonlocal\f1\fs24  explicitly declares a variable to be used from an outer scope rather than locally, both for resolution and re-binding. It is illegal to use nonlocal outside of a lexically nested function, and it must be nested inside a function that defines the identifiers listed by nonlocal.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 There are several small gotchas about lexical scoping, but overall things behave as you would probably expect (for example, you can\rquote t cause a name to be used locally and as a lexically nested name in the same code block, as the collapsed snippet below demonstrates):\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 >>> def outer():\par
...     a = 1\par
...     def inner():\par
...             b = a\par
...             a = 1\par
...             return a,b\par
...     return inner\par
...\par
>>> outer()()\par
Traceback (most recent call last):\par
  File "<stdin>", line 1, in <module>\par
  File "<stdin>", line 4, in inner\par
UnboundLocalError: local variable 'a' referenced before assignment\par
>>>\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 This sums up the mechanics of naming and scoping.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f2\fs28\b Byte Code}{\par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 The compilation of Python source code emits Python bytecode, which is evaluated at runtime to produce whatever behaviour the programmer implemented. I guess you can think of bytecode as \lquote machine code for the Python virtual machine\rquote , and indeed if you look at some binary x86 machine code (like this one: 0x55 0x89 0xe5 0xb8 0x2a 0x0 0x0 0x0 0x5d) and some Python bytecode (like that one: 0x64 0x1 0x0 0x53) they look more or less like the same sort of gibberish.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 The bytecode and these fields are lumped together in an object called a code object, our subject for this article.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 You might initially confuse function objects with code objects, but shouldn\rquote t. Functions are higher level creatures that execute code by relying on a lower level primitive, the code object, but adding more functionality on top of that (in other words, every function has precisely one code object directly associated with it, this is the function\rquote s \f3\fs20 __code__\f1\fs24  attribute, or \f3\fs20 f_code\f1\fs24  in Python 2.x).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 For example, among other things, a function keeps a reference to the global namespace (remember that?) in which it was originally defined, and knows the default values of arguments it receives. You can sometimes execute a code objects without a function (see eval and exec), but then you will have to provide it with a namespace or two to work in.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Finally, just for accuracy\rquote s sake, please note that \f3\fs20 tp_call\f1\fs24  of a function object isn\rquote t exactly like \f3\fs20 exec\f1\fs24  or \f3\fs20 eval\f1\fs24 ; the latter don\rquote t pass in arguments or provide free argument binding (more below on these).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 If this doesn\rquote t sit well with you yet, don\rquote t panic, it just means functions\rquote  code objects won\rquote t necessarily be executable using eval or exec. I hope we have that settled.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 A piece of Python program text that is executed as a unit. The following are blocks: \f3\fs20 a module, a function body, and a class definition\f1\fs24 .\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 As usual, I don\rquote t want to dig too deeply into compilation, but basically when a code block is encountered, it has to be successfully transformed into an AST (which requires mostly that its syntax will be correct), which is then passed to \f3\fs20 ./Python/compile.c: PyAST_Compile\f1\fs24 , the entry point into Python\rquote s compilation machinary.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 You absolutely can\rquote t run this code meaningfully without its constants, and indeed 42 is referred to by one of the extra fields of the code object. We will best see the interaction between the actual bytecode and the accompanying fields as we do a manual disassembly:\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 # the opcode module has a mapping of opcode\par
#  byte values to their symbolic names\par
>>> import opcode\par
>>> def return42(): return 42\par
...\par
# this is the function's code object\par
>>> return42.__code__\par
<code object return42 ... >\par
# this is the actual bytecode\par
>>> return42.__code__.co_code\par
b'd\\x01\\x00S'\par
# this is the field holding constants\par
>>> return42.__code__.co_consts\par
(None, 42)\par
# the first opcode is LOAD_CONST\par
>>> opcode.opname[return42.__code__.co_code[0]]\par
'LOAD_CONST'\par
# LOAD_CONST has one word as an operand\par
#  let's get its value\par
>>> return42.__code__.co_code[1] + \\\par
... 256 * return42.__code__.co_code[2]\par
1\par
# and which constant can we find in offset 1?\par
>>> return42.__code__.co_consts[1]\par
42\par
# finally, the next opcode\par
>>> opcode.opname[return42.__code__.co_code[3]]\par
'RETURN_VALUE'\par
>>>\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 In addition to dis, the function show_code from the same module is useful to look at code objects:\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 >>> diss(return42)\par
  1           0 LOAD_CONST               1 (42)\par
              3 RETURN_VALUE\par
>>> ssc(return42)\par
Name:              return42\par
Filename:          <stdin>\par
Argument count:    0\par
Kw-only arguments: 0\par
Number of locals:  0\par
Stack size:        1\par
Flags:             OPTIMIZED, NEWLOCALS, NOFREE\par
Constants:\par
   0: None\par
   1: 42\par
>>>\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 We see diss and ssc generally agree with our disassembly, though ssc further parsed all sorts of other fields of the code object which we didn\rquote t handle so far (you can run dir on a code object to see them yourself). Code objects are immutable and their fields don\rquote t hold any references (directly or indirectly) to mutable objects. This immutability is useful in simplifying many things, one of which is the handling of nested code blocks.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 An example of a nested code block is a class with two methods: the class is built using a code block, and this code block nests two inner code blocks, one for each method.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 This situation is recursively handled by creating the innermost code objects first and treating them as constants for the enclosing code object (much like an integer or a string literal would be treated). Now that we have seen the relation between the bytecode and a code object field (co_consts), let\rquote s take a look at the myriad of other fields in a code object. Many of these fields are just integer counters or tuples of strings representing how many or which variables of various sorts are used in a code object. But looking to the horizon where ceval.c and frame object evaluation is waiting for us, I can tell you that we need an immediate and crisp understanding of all these fields and their exact meaning, subtleties included.\f0 \par
}}{\pard \nisusnos {\par
}}{\listtext {\pard \nisusnos \nowidctlpar\li720\lin720\fi-720\ri0\rin0\tx220\tx720 {\f1 \bullet \tab }}}{\pard \nisusnos \nowidctlpar\ls5\ilvl0\li720\lin720\fi-720\ri0\rin0\tx220\tx720 {\f1 \bullet }{\f1 Identity or origin (strings)\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 co_name\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 A name (a string) for this code object; for a function this would be the function\rquote s name, for a class this would be the class\rquote  name, etc. The compile builtin doesn\rquote t let you specify this, so all code objects generated with it carry the name <module>.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 co_filename\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 The filename from which the code was compiled. Will be <stdin> for code entered in the interactive interpreter or whatever name is given as the second argument to compile for code objects created with compile.\f0 \par
}}{\pard \nisusnos {\par
}}{\listtext {\pard \nisusnos \nowidctlpar\li720\lin720\fi-720\ri0\rin0\tx220\tx720 {\f1 \bullet \tab }}}{\pard \nisusnos \nowidctlpar\ls6\ilvl0\li720\lin720\fi-720\ri0\rin0\tx220\tx720 {\f1 \bullet }{\f1 Different types of names (string tuples)\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 co_varnames\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 A tuple containing the names of the local variables (including arguments). To parse this tuple properly you need to look at co_flags and the counter fields listed below, so you\rquote ll know which item in the tuple is what kind of variable. In the \lquote richest\rquote  case, co_varnames contains (in order): positional argument names (including optional ones), keyword only argument names (again, both required and optional), varargs argument name (i.e., \f3\fs20 *args\f1\fs24 ), kwds argument name (i.e., \f3\fs20 **kwargs\f1\fs24 ), and then any other local variable names. So you need to look at co_argcount, co_kwonlyargcount and co_flags to fully interpret this tuple.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 co_cellvars\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 A tuple containing the names of local variables that are stored in cells (discussed in the previous article) because they are referenced by lexically nested functions.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 co_freevars\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 A tuple containing the names of free variables. Generally, a free variable means a variable which is referenced by an expression but isn\rquote t defined in it. In our case, it means a variable that is referenced in this code object but was defined and will be dereferenced to a cell in another code object (also see co_cellvars above and, again, the previous article).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 co_names\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 A tuple containing the names which aren\rquote t covered by any of the other fields (they are not local variables, they are not free variables, etc) used by the bytecode. This includes names deemed to be in the global or builtin namespace as well as attributes (i.e., if you do foo.bar in a function, bar will be listed in its code object\rquote s names).\f0 \par
}}{\pard \nisusnos {\par
}}{\listtext {\pard \nisusnos \nowidctlpar\li720\lin720\fi-720\ri0\rin0\tx220\tx720 {\f1 \bullet \tab }}}{\pard \nisusnos \nowidctlpar\ls7\ilvl0\li720\lin720\fi-720\ri0\rin0\tx220\tx720 {\f1 \bullet }{\f1 Counters and indexes (integers)\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 co_argcount\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 The number of positional arguments the code object expects to receive, including those with default values. For example, def foo(a, b, c=3): pass would have a code object with this value set to three. The code object of classes accept one argument which we will explore when we discuss class creation.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 co_kwonlyargcount\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 The number of keyword arguments the code object can receive.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 co_nlocals\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 The number of local variables used in the code object (including arguments).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 co_firstlineno\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 The line offset where the code object\rquote s source code began, relative to the module it was defined in, starting from one. In this (and some but not all other regards), each input line typed in the interactive interpreter is a module of its own.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 co_stacksize\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 The maximum size required of the value stack when running this object. This size is statically computed by the compiler (./Python/compile.c: stackdepth when the code object is created, by looking at all possible flow paths searching for the one that requires the deepest value stack. To illustrate this, look at the diss and ssc outputs for a = 1 and a = [1,2,3]. The former has at most one value on the value stack at a time, the latter has three, because it needs to put all three integer literals on the stack before building the list.\f0 \par
}}{\pard \nisusnos {\par
}}{\listtext {\pard \nisusnos \nowidctlpar\li720\lin720\fi-720\ri0\rin0\tx220\tx720 {\f1 \bullet \tab }}}{\pard \nisusnos \nowidctlpar\ls8\ilvl0\li720\lin720\fi-720\ri0\rin0\tx220\tx720 {\f1 \bullet }{\f1 Other stuff (various)\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 co_code\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 A string representing the sequence of bytecode instructions, contains a stream of opcodes and their operands (or rather, indexes which are used with other code object fields to represent their operands, as we saw above).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 co_consts\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 A tuple containing the literals used by the bytecode. Remember everything in a code object must be immutable, running diss and ssc on the code snippets a=(1,2,3) versus [1,2,3] and yet again versus a=(1,2,3,[4,5,6]) recommended to dig this field.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 co_lnotab\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 A string encoding the mapping from bytecode offsets to line numbers. If you happen to really care how this is encoded you can either look at ./Python/compile.c or ./Lib/dis.py: findlinestarts.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 co_flags\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 An integer encoding a number of flags regarding the way this code object was created (which says something about how it should be evaluated). The list of possible flags is listed in ./Include/code.h, as a small example I can give CO_NESTED, which marks a code object which was compiled from a lexically nested function. Flags also have an important role in the implementation of the \f3\fs20 __future__\f1\fs24  mechanism, which is still unused in Python 3.1 at the time of this writing, as no \ldblquote future syntax\rdblquote  exists in Python 3.1. However, even when thinking in Python 3.x terms co_flags is still important as it facilitates the migration from the 2.x branch. In 2.x, \f3\fs20 __future__\f1\fs24  is used when enabling Python 3.x like behaviour (i.e., from \f3\fs20 __future__\f1\fs24  import print_function in Python 2.7 will disable the print statement and add a print function to the builtins module, just like in Python 3.x). If we come across flags from now on (in future posts), I\rquote ll try to mention their relevance in the particular scenario.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 co_zombieframe\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 This field of the PyCodeObject struct is not exposed in the Python object; it (optionally) points to a stack frame object. This can aid performance by maintaining an association between a code object and a stack frame object, so as to avoid reallocation of frames by recycling the frame object used for a code object. There\rquote s a detailed comment in ./Objects/frameobject.c explaining zombie frames and their reanimation, we may mention this issue again when we discuss stack frames.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 The above codeobjects list is not exhaustive. More can be added based on need and usage. This completes the codeobjects explaination, next will be frameobjects.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Core of Python\rquote s Virtual Machine, the \ldblquote actually do work function\rdblquote  \f3\fs20 ./Python/ceval.c: PyEval_EvalFrameEx\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Last hurdle on our way there is to understand the three significant stack data structures used for CPython\rquote s code evaluation: the call stack, the value stack and the block stack. All three stacks are tightly coupled with the frame object, which will also be discussed today.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 In computer science, a call stack is a stack data structure that stores information about the active subroutines of a computer program\u8230 ? A call stack is composed of stack frames (\u8230 ?). These are machine dependent data structures containing subroutine state information. Each stack frame corresponds to a call to a subroutine which has not yet terminated with a return.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Since CPython implements a virtual machine, its call stack and stack frames are dependant on this virtual machine, not on the physical machine it\rquote s running on.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Python tends to do, this internal implementation detail is exposed to Python code, either via the C-API or pure Python, as frame objects (\f3\fs20 ./Include/frameobject.h: PyFrameObject\f1\fs24 ).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 We know that code execution in CPython is really the evaluation (interpretation) of a code object, so every frame represents a currently-being-evaluated code object. We\rquote ll see (and already saw before) that frame objects are linked to one another, thus forming a call stack of frames. Finally, inside each frame object in the call stack there\rquote s a reference to two frame-specific stacks (not directly related to the call stack), they are the value stack and the block stack.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 The value stack (you may know this term as an \lquote evaluation stack\rquote ) is where manipulation of objects happens when object-manipulating opcodes are evaluated\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 We have seen the value stack before on various occasions, like in the introduction and during our discussion of namespaces.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Recalling an example we used before, \f3\fs20 BINARY_SUBTRACT\f1\fs24  is an opcode that effectively pops the two top objects in the value stack, performs \f3\fs20 PyNumber_Subtract\f1\fs24  on them and sets the new top of the value stack to the result.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Namespace related opcodes, like \f3\fs20 LOAD_FAST\f1\fs24  or \f3\fs20 STORE_GLOBAL\f1\fs24 , load values from a namespace to the stack or store values from the stack to a namespace. Each frame has a value stack of its own (this makes sense in several ways, possibly the most prominent is simplicity of implementation), we\rquote ll see later where in the frame object the value stack is stored.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Python has a notion called a code block, which we have discussed in the article about code objects and which is also explained here. Completely unrelatedly, Python also has a notion of compound statements, which are statements that contain other statements (the language reference defines compound statements here). Compound statements consist of one or more clauses, each made of a header and a suite. Even if the terminology wasn\rquote t known to you until now, I expect this is all instinctively clear to you if you have almost any Python experience: for, try and while are a few compound statements.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 In various places throughout the code, a block (sometimes \ldblquote frame block\rdblquote , sometimes \ldblquote basic block\rdblquote ) is used as a loose synonym for a clause or a suite, making it easier to confuse suites and clauses with what\rquote s actually a code block or vice versa.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Both the compilation code (./Python/compile.c) and the evaluation code (./Python/ceval.c) are aware of various suites and have (ill-named) data structures to deal with them; but since we\rquote re more interested in evaluation in this series, we won\rquote t discuss the compilation-related details much (or at all).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Whenever I\rquote ll think wording might get confusing, I\rquote ll mention the formal terms of clause or suite alongside whatever code term we\rquote re discussing. With all this terminology in mind we can look at what\rquote s contained in a frame object.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Looking at the declaration of \f3\fs20 ./Include/frameobject.h: PyFrameObject\f1\fs24 , we find (comments were trimmed and edited for your viewing pleasure):\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 typedef struct _frame \{\par
   PyObject_VAR_HEAD\par
   struct _frame *f_back;   /* previous frame, or NULL */\par
   PyCodeObject *f_code;    /* code segment */\par
   PyObject *f_builtins;    /* builtin symbol table */\par
   PyObject *f_globals;     /* global symbol table */\par
   PyObject *f_locals;      /* local symbol table */\par
   PyObject **f_valuestack; /* points after the last local */\par
   PyObject **f_stacktop;   /* current top of valuestack */\par
   PyObject *f_trace;       /* trace function */\par
\par
   /* used for swapping generator exceptions */\par
   PyObject *f_exc_type, *f_exc_value, *f_exc_traceback;\par
\par
   PyThreadState *f_tstate; /* call stack's thread state */\par
   int f_lasti;             /* last instruction if called */\par
   int f_lineno;            /* current line # (if tracing) */\par
   int f_iblock;            /* index in f_blockstack */\par
\par
   /* for try and loop blocks */\par
   PyTryBlock f_blockstack[CO_MAXBLOCKS];\par
\par
   /* dynamically: locals, free vars, cells and valuestack */\par
   PyObject *f_localsplus[1]; /* dynamic portion */\par
\} PyFrameObject;\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 We see various fields used to store the state of this invocation of the code object as well as maintain the call stack\rquote s structure. Both in the C-API and in Python these fields are all prefixed by \f3\fs20 f_\f1\fs24 , though not all the fields of the C structure PyFrameObject are exposed in the pythonic representation.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 We already mentioned the relation between frame and code objects, so the f_code field of every frame points to precisely one code object.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Insofar as structure goes, frames point backwards thus that they create a stack (f_back) as well as point \ldblquote root-wards\rdblquote  in the interpreter state/thread state/call stack structure by pointing to their thread state (f_tstate), as explained here. Finally, since you always execute Python code in the context of three namespaces (as discussed there), frames have the f_builtins, f_globals and f_locals fields to point to these namespaces.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Before we dig into the other fields of a frame object, please notice frames are a variable size Python object (they are a PyObject_VAR_HEAD).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 The reason is that when a frame object is created it should be dynamically allocated to be large enough to contain references (pointers, really) to the locals, cells and free variables used by its code object, as well as the value stack needed by the code objects \lquote deepest\rquote  branch.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Indeed, the last field of the frame object, f_localsplus (locals plus cells plus free variables plus value stack\u8230 ?) is a dynamic array where all these references are stored. \f3\fs20 PyFrame_New\f1\fs24  will show you exactly how the size of this array is computed.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f3\fs20 co_nlocals\f1\fs24 , \f3\fs20 co_cellvars\f1\fs24 , \f3\fs20 co_freevars\f1\fs24  and \f3\fs20 co_stacksize\f1\fs24  \endash  during evaluation, all these \lquote dead\rquote  parts of the inert code object come to \lquote life\rquote  in space allocated at the end of the frame. As we\rquote ll probably see in the next article, when the frame is evaluated, these references at the end of the frame will be used to get (or set) \ldblquote fast\rdblquote  local variables, free variables and cell variables, as well as to the variables on the value stack (\ldblquote fast\rdblquote  locals was explained when we discussed namespaces).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Looking back at the commented declaration above and given what I said here, I believe you should now understand \f3\fs20 f_valuestack\f1\fs24 , \f3\fs20 f_stacktop\f1\fs24  and \f3\fs20 f_localsplus\f1\fs24 .\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 As you can maybe imagine, compound statements sometimes require state to be evaluated. If we\rquote re in a loop, we need to know where to go in case of a break or a continue. If we\rquote re raising an exception, we need to know where is the innermost enclosing handler (the suite of the closest except header, in more formal terms).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 This state is stored in \f3\fs20 f_blockstack\f1\fs24 , a fixed size stack of \f3\fs20 PyTryBlock structures\f1\fs24  which keeps the current compound statement state for us (\f3\fs20 PyTryBlock\f1\fs24  is not just for try blocks; it has a \f3\fs20 b_type\f1\fs24  field to let it handle various types of compound statements\rquote  suites). \f3\fs20 f_iblock\f1\fs24  is an offset to the last allocated PyTryBlock in the stack. If we need to bail out of the current \ldblquote block\rdblquote  (that is, the current clause), we can pop the block stack and find the new offset in the bytecode from which we should resume evaluation in the popped \f3\fs20 PyTryBlock\f1\fs24  (look at its b_handler and b_level fields).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 A somewhat special case is a raised exception which exhausts the block stack without being caught, as you can imagine, in that case a handler will be sought in the block stack of the previous frames on the call stack.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 All this should easily click into place now if you read three code snippets. First, look at this disassembly of a for statement (this would look strikingly similar for a try statement):\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 >>> def f():\par
...     for c in 'string':\par
...             my_global_list.append(c)\par
...\par
>>> diss(f)\par
 2           0 SETUP_LOOP              27 (to 30)\par
             3 LOAD_CONST               1 ('string')\par
             6 GET_ITER\par
       >>    7 FOR_ITER                19 (to 29)\par
            10 STORE_FAST               0 (c)\par
\par
 3          13 LOAD_GLOBAL              0 (my_global_list)\par
            16 LOAD_ATTR                1 (append)\par
            19 LOAD_FAST                0 (c)\par
            22 CALL_FUNCTION            1\par
            25 POP_TOP\par
            26 JUMP_ABSOLUTE            7\par
       >>   29 POP_BLOCK\par
       >>   30 LOAD_CONST               0 (None)\par
            33 RETURN_VALUE\par
>>>\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Look at how the opcodes \f3\fs20 SETUP_LOOP\f1\fs24  and \f3\fs20 POP_BLOCK\f1\fs24  are implemented in \f3\fs20 ./Python/ceval.c\f1\fs24 .\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Notice that \f3\fs20 SETUP_LOOP\f1\fs24  and \f3\fs20 SETUP_EXCEPT\f1\fs24  or \f3\fs20 SETUP_FINALLY\f1\fs24  are rather similar, they all push a block matching the relevant suite unto the block stack, and they all utilize the same \f3\fs20 POP_BLOCK\f1\fs24 :\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 TARGET_WITH_IMPL(SETUP_LOOP, _setup_finally)\par
TARGET_WITH_IMPL(SETUP_EXCEPT, _setup_finally)\par
TARGET(SETUP_FINALLY)\par
_setup_finally:\par
    PyFrame_BlockSetup(f, opcode, INSTR_OFFSET() + oparg,\par
               STACK_LEVEL());\par
    DISPATCH();\par
\par
TARGET(POP_BLOCK)\par
    \{\par
        PyTryBlock *b = PyFrame_BlockPop(f);\par
        UNWIND_BLOCK(b);\par
    \}\par
    DISPATCH();\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Finally, look at the actual implementation of \f3\fs20 ./Object/frameobject.c: PyFrame_BlockSetup\f1\fs24  and \f3\fs20 ./Object/frameobject.c\f1\fs24 :\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 PyFrame_BlockPop:\par
\par
void\par
PyFrame_BlockSetup(PyFrameObject *f, int type, int handler, int level)\par
\{\par
   PyTryBlock *b;\par
   if (f->f_iblock >= CO_MAXBLOCKS)\par
       Py_FatalError("XXX block stack overflow");\par
   b = &f->f_blockstack[f->f_iblock++];\par
   b->b_type = type;\par
   b->b_level = level;\par
   b->b_handler = handler;\par
\}\par
\par
PyTryBlock *\par
PyFrame_BlockPop(PyFrameObject *f)\par
\{\par
   PyTryBlock *b;\par
   if (f->f_iblock <= 0)\par
       Py_FatalError("XXX block stack underflow");\par
   b = &f->f_blockstack[--f->f_iblock];\par
   return b;\par
\}\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 If you keep the terminology straight, \f3\fs20 f_blockstack\f1\fs24  turns out to be rather simple. We\rquote re left with the rather esoteric fields, some simpler, some a bit more arcane. In the \lquote simpler\rquote  range we have f_lasti, an integer offset into the bytecode of the last instructions executed (initialized to -1, i.e., we didn\rquote t execute any instruction yet).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 This index lets us iterate over the opcodes in the bytecode stream. Heading towards the \lquote more arcane\rquote  area we see f_trace and f_lineno. f_trace is a pointer to a tracing function (see sys.settrace; think implementation of a tracer or a debugger). \f3\fs20 f_lineno\f1\fs24  contains the line number of the line which caused the generation of the current opcode; it is valid only when tracing (otherwise use \f3\fs20 PyCode_Addr2Line\f1\fs24 ).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Last but not least, we have three exception fields (f_exc_type, f_exc_value and f_exc_traceback), which are rather particular to generators so we\rquote ll discuss them when we discuss that beast (there\rquote s a longer comment about these fields in ./Include/frameobject.h if you\rquote re curious right now). On a parting note, we can mention when frames are created. This happens in ./Objects/frameobject.c: PyFrame_New, usually called from ./Python/ceval.c: PyEval_EvalCodeEx (and ./Python/ceval.c: fast_function, a specialized optimization of PyEval_EvalCodeEx).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Frame creation occurs whenever a code object should be evaluated, which is to say when a function is called, when a module is imported (the module\rquote s top-level code is executed), whenever a class is defined, for every discrete command entered in the interactive interpreter, when the builtins eval or exec are used and when the -c switch is used (I didn\rquote t absolutely verify this is a 100% exhaustive list, but it think it\rquote s rather complete).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Looking at the list in the previous paragraph, you probably realized frames are created very often, so two optimizations are implemented to make frame creation fast: first, code objects have a field (co_zombieframe) which allows them to remain associated with a \lquote zombie\rquote  (dead, unused) frame object even when they\rquote re not evaluated. If a code object was already evaluated once, chances are it will have a zombie frame ready to be reanimated by PyFrame_New and returned instead of a newly allocated frame (trading some memory to reduce the number of allocations).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Second, allocated and entirely unused stack frames are kept in a special free-list (./Objects/frameobject.c: free_list), frames from this list will be used if possible, instead of actually allocating a brand new frame. This is all kindly commented in ./Objects/frameobject.c.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 ./Python/ceval.c: PyEval_EvalFrameEx is important function in the Python interpreter.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Well, as I said, this switch can be found in the rather lengthy file ceval.c, in the rather lengthy function PyEval_EvalFrameEx, which takes more than half the file\rquote s lines (it\rquote s roughly 2,250 lines, the file is about 4,400).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 PyEval_EvalFrameEx implements CPython\rquote s evaluation loop, which is to say that it\rquote s a function that takes a frame object and iterates over each of the opcodes in its associated code object, evaluating (interpreting, executing) each opcode within the context of the given frame (this context is chiefly the associated namespaces and interpreter/thread states). There\rquote s more to ceval.c than PyEval_EvalFrameEx, and we may discuss some of the other bits later in this post (or perhaps a follow-up post), but PyEval_EvalFrameEx is obviously the most important part of it.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Having described the evaluation loop in the previous paragraph, let\rquote s see what it looks like in C (edited):\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 PyEval_EvalFrameEx(PyFrameObject *f, int throwflag)\par
\{\par
    /* variable declaration and initialization stuff */\par
    for (;;) \{\par
        /* do periodic housekeeping once in a few opcodes */\par
        opcode = NEXTOP();\par
        if (HAS_ARG(opcode)) oparg = NEXTARG();\par
        switch (opcode) \{\par
            case NOP:\par
                goto fast_next_opcode;\par
            /* lots of more complex opcode implementations */\par
            default:\par
                /* become rather unhappy */\par
        \}\par
        /* handle exceptions or runtime errors, if any */\par
    \}\par
    /* we are finished, pop the frame stack */\par
    tstate->frame = f->f_back;\par
    return retval;\par
\}\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 As you can see, iteration over opcodes is infinite (forever: fetch next opcode, do stuff), breaking out of the loop must be done explicitly.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 CPython (reasonably) assumes that evaluated bytecode is correct in the sense that it terminates itself by raising an exception, returning a value, etc. Indeed, if you were to synthesize a code object without a RETURN_VALUE at its end and execute it (exercise to reader: how?1), you\rquote re likely to execute rubbish, reach the default handler (raises a SystemError) or maybe even segfault the interpreter (I didn\rquote t check this thoroughly, but it looks plausible).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 In order for you to be able to get a feel for what more serious opcode implementations look like, here\rquote s the (edited) implementation of three more opcodes, illustrating a few more principles:\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 case BINARY_SUBTRACT:\par
    w = *--stack_pointer; /* value stack POP */\par
    v = stack_pointer[-1];\par
    x = PyNumber_Subtract(v, w);\par
    stack_pointer[-1] = x; /* value stack SET_TOP */\par
    if (x != NULL) continue;\par
    break;\par
case LOAD_CONST:\par
    x = PyTuple_GetItem(f->f_code->co_consts, oparg);\par
    *stack_pointer++ = x; /* value stack PUSH */\par
    goto fast_next_opcode;\par
case SETUP_LOOP:\par
case SETUP_EXCEPT:\par
case SETUP_FINALLY:\par
    PyFrame_BlockSetup(f, opcode, INSTR_OFFSET() + oparg,\par
               STACK_LEVEL());\par
    continue;\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 We see several things. First, we see a typical value manipulation opcode, BINARY_SUBTRACT. This opcode (and many others) works with values on the value stack as well as with a few temporary variables, using CPython\rquote s C-API abstract object layer (in our case, a function from the number-like object abstraction) to replace the two top values on the value stack with the single value resulting from subtraction.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 As you can see, a small set of temporary variables, such as v, w and x are used (and reused, and reused\u8230 ?) as the registers of the CPython VM.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 The variable stack_pointer represents the current bottom of the stack (the next free pointer in the stack). This variable is initialized at the beginning of the function like so: stack_pointer = f->f_stacktop;\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 In essence, together with the room reserved in the frame object for that purpose, the value stack is this pointer. To make things simpler and more readable, the real (unedited by me) code of ceval.c defines several value stack manipulation/observation macros, like PUSH, TOP or EMPTY.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Next, we see a very simple opcode that loads values from somewhere into the valuestack. I chose to quote LOAD_CONST because it\rquote s very brief and simple, although it\rquote s not really a namespace related opcode.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 \ldblquote Real\rdblquote  namespace opcodes load values into the value stack from a namespace and store values from the value stack into a namespace; LOAD_CONST loads constants, but doesn\rquote t fetch them from a namespace and has no STORE_CONST counterpart (we explored all this at length in the article about namespaces).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 The final opcode I chose to show is actually the single implementation of several different control-flow related opcodes (SETUP_LOOP, SETUP_EXCEPT and SETUP_FINALLY), which offload all details of their implementation to the block stack manipulation function PyFrame_BlockSetup; we discussed the block stack in our discussion of interpreter stacks.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Something we can observe looking at these implementations is that different opcodes exit the switch statement differently. Some simply break, and let the code after the switch resume.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Some use continue to start the for loop from the beginning. Some goto various labels in the function. Each exit has different semantic meaning.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 If you break out of the switch (the \lquote normal\rquote  route), various checks will be made to see if some special behaviour should be performed \endash  maybe a code block has ended, maybe an exception was raised, maybe we\rquote re ready to return a value. Continuing the loop or going to a label lets certain opcodes take various shortcuts; no use checking for an exception after a NOP or a LOAD_CONST, for instance.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 If you look at the code itself, you will see that none of the case expressions for the big switch are really there. The code for the NOP opcode is actually (remember this series is about Python 3.x unless noted otherwise, so this snippet is from Python 3.1.2):\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 TARGET(NOP)\par
    FAST_DISPATCH();\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 TARGET? FAST_DISPATCH? What are these? Let me explain. Things may become clearer if we\rquote d look for a moment at the implementation of the NOP opcode in ceval.c of Python 2.x. Over there the code for NOP looks more like the samples I\rquote ve shown you so far, and it actually seems to me that the code of ceval.c gets simpler and simpler as we look backwards at older revisions of it.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 The reason is that although I think PyEval_EvalFrameEx was originally written as a really exceptionally straightforward piece of code, over the years some necessary complexity crept into it as various optimizations and improvements were implemented (I\rquote ll collectively call them \lquote additions\rquote  from now on, for lack of a better term).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 To further complicate matters, many of these additions are compiled conditionally with preprocessor directives, so several things are implemented in more than one way in the same source file. I can understand trading simplicity to optimize a tight loop which is used very often, and the evaluation loop is probably one of the more used loops in CPython (and probably as tight as its contributors could make it). So while this is all very warranted, it doesn\rquote t help the readability of the code. Anyway, I\rquote d like to enumerate these additions here explicitly (some in more depth than others); this should aid future discussion of ceval.c, as well as prevent me from feeling like I\rquote m hiding too many important things with my free spirited editing of quoted code.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Fortunately, most if not all these additions are very well commented -actually, some of the explanations below will be just summaries or even taken verbatim from these comments, as I believe that they\rquote re accurate (eek!). So, as you read \f3\fs20 PyEval_EvalFrameEx\f1\fs24  (and indeed ceval.c in general), you\rquote re likely to run into any of these\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f2\fs28\b \ldblquote Threaded Code\rdblquote  (Computed-GOTOs)}{\par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Let\rquote s start with the addition that gave us TARGET, FAST_DISPATCH and a few other macros. The evaluation loop uses a \ldblquote switch\rdblquote  statement, which decent compilers optimize as a single indirect branch instruction with a lookup table of addresses. Alas, since we\rquote re switching over rapidly changing opcodes (it\rquote s uncommon to have the same opcode repeat), this would have an adverse effect on the success rate of CPU branch prediction.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Fortunately gcc supports the use of C-goto labels as values, which you can generally pass around and place in an array (restrictions apply!). Using an array of adresses in memory obtained from labels, as you can see in ./Python/opcode_targets.h, we create an explicit jump table and place an explicit indirect jump instruction at the end of each opcode. This improves the success rate of CPU prediction and can yield as much as 20% boost in performance.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Thus, for example, the NOP opcode is implemented in the code like so:\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 TARGET(NOP)\par
    FAST_DISPATCH();\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 In the simpler scenario, this would expand to a plain case statement and a goto, like so:\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 case NOP:\par
    goto fast_next_opcode;\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 But when threaded code is in use, that snippet would expand to (I highlighted the lines where we actually move on to the next opcode, using the dispatch table of label-values):\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 TARGET_NOP:\par
    opcode = NOP;\par
    if (HAS_ARG(NOP))\par
        oparg = NEXTARG();\par
case NOP:\par
    \{\par
        if (!_Py_TracingPossible) \{\par
            f->f_lasti = INSTR_OFFSET();\par
            goto *opcode_targets[*next_instr++];\par
        \}\par
        goto fast_next_opcode;\par
    \}\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Same behaviour, somewhat more complicated implementation, up to 20% faster Python. Nifty.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f2\fs28\b Opcode Prediction}{\par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Some opcodes tend to come in pairs. For example, COMPARE_OP is often followed by JUMP_IF_FALSE or JUMP_IF_TRUE, themselves often followed by a POP_TOP.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 What\rquote s more, there are situations where you can determine that a particular next-opcode can be run immediately after the execution of the current opcode, without going through the \lquote outer\rquote  (and expensive) parts of the evaluation loop.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f3\fs20 PREDICT\f1\fs24  (and a few others) are a set of macros that explicitly peek at the next opcode and jump to it if possible, shortcutting most of the loop in this fashion (i.e., \f3\fs20 if (*next_instr == op) goto PRED_##op)\f1\fs24 .\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Note that there is no relation to real hardware here, these are simply hardcoded conditional jumps, not an exploitation of some mechanism in the underlying CPU (in particular, it has nothing to do with \ldblquote Threaded Code\rdblquote  described above).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f2\fs28\b Low Level Tracing}{\par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 An addition primarily geared towards those developing CPython (or suffering from a horrible, horrible bug), Low Level Tracing is controlled by the LLTRACE preprocessor name, which is enabled by default on debug builds of CPython (see \endash with-pydebug). As explained in ./Misc/SpecialBuilds.txt: when this feature is compiled-in, PyEval_EvalFrameEx checks the frame\rquote s global namespace for the variable \f3\fs20 __lltrace__\f1\fs24 .\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 If such a variable is found, mounds of information about what the interpreter is doing are sprayed to stdout, such as every opcode and opcode argument and values pushed onto and popped off the value stack. Not useful very often, but very useful when needed.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 This is the what the low level trace output looks like (slightly edited):\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f3\fs20 >>> def f():\par
...     global a\par
...     return a - 5\par
...\par
>>> dis(f)\par
  3           0 LOAD_GLOBAL              0 (a)\par
              3 LOAD_CONST               1 (5)\par
              6 BINARY_SUBTRACT\par
              7 RETURN_VALUE\par
>>> exec(f.__code__, \{'__lltrace__': 'foo', 'a': 10\})\par
0: 116, 0\par
push 10\par
3: 100, 1\par
push 5\par
6: 24\par
pop 5\par
7: 83\par
pop 5\par
# trace of the end of exec() removed\par
>>>\f0\fs24 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 As you can guess, you\rquote re seeing a real-time disassembly of what\rquote s going through the VM as well as stack operations. For example, the first line says: line 0, do opcode 116 (LOAD_GLOBAL) with the operand 0 (expands to the global variable a), and so on, and so forth. This is a bit like (well, little more than) adding a bunch of printf calls to the heart of VM.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar\keepn {\f2\fs28\b Advanced Profiling}{\par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Under this heading I\rquote d like to briefly discuss several profiling related additions. The first relies on the fact that some processors (notably Pentium descendants and at least some PowerPCs) have built-in wall time measurement capabilities which are cheap and precise (correct me if I\rquote m wrong).\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 As an aid in the development of a high-performance CPython implementation, Python 2.4\u8242 ?s ceval.c was instrumented with the ability to collect per-opcode profiling statistics using these counters.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 This instrumentation is controlled by the somewhat misnamed \endash with-tsc configuration flag (TSC is an Intel Pentium specific name, and this feature is more general than that). Calling sys.settscdump(True) on an instrumented interpreter will cause the function ./Python/ceval.c: dump_tsc to print these statistics every time the evaluation loop loops.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 The second advanced profiling feature is Dynamic Execution Profiling. This is only available if Python was built with the DYNAMIC_EXECUTION_PROFILE preprocessor name.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 As ./Tools/scripts/analyze_dxp.py says, [this] will tell you which opcodes have been executed most frequently in the current process, and, if Python was also built with -DDXPAIRS, will tell you which instruction _pairs_ were executed most frequently, which may help in choosing new instructions.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 One last thing to add here is that enabling Dynamic Execution Profiling implicitly disables the \ldblquote Threaded Code\rdblquote  addition.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 The third and last addition in this category is function call profiling, controlled by the preprocessor name CALL_PROFILE. Quoting ./Misc/SpecialBuilds.txt again: When this name is defined, the ceval mainloop and helper functions count the number of function calls made. It keeps detailed statistics about what kind of object was called and whether the call hit any of the special fast paths in the code.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 Two preprocessor names, USE_STACKCHECK and CHECKEXC include extra assertions. Testing an interpreter with these enabled may catch a subtle bug or regression, but they are usually disabled as they\rquote re too expensive.\f0 \par
}}{\pard \nisusnos {\par
}}{\pard \nisusnos \nowidctlpar {\f1 That\rquote s the end of how eval loop operates.\par }}}