Notes from Allison Kaptur's Python Internals presentation at Hacker School 20140219

`dir` returns a selection (not complete) listing of methods and attributes of a function

`__dict__` returns just the attributes

`__code__`: code object (distinct from function objects)

~~~
def foo():
    print('foo!')
from dis import dis
dir(foo.__code__)
~~~

examine bytecode:
~~~
In [4]: foo.__code__.co_code
Out[4]: b't\x00\x00d\x01\x00\x83\x01\x00\x01d\x00\x00S'
~~~


~~~
In [33]: [byte for byte in foo.__code__.co_code]
Out[33]: [116, 0, 0, 100, 1, 0, 131, 1, 0, 1, 100, 0, 0, 83]
In [38]: dis(foo)
  2           0 LOAD_GLOBAL              0 (print) 
              3 LOAD_CONST               1 ('foo!') 
              6 CALL_FUNCTION            1 (1 positional, 0 keyword pair) 
              9 POP_TOP              
             10 LOAD_CONST               0 (None) 
             13 RETURN_VALUE         
~~


def iffer():
    if foo:
        print('foo')
    elif bar:
        print('bar')
    else:
        return

def iffer2():
    if foo:
        print('foo')
    else:
        if bar:
            print('bar')
        else:
            return

~~~
In [11]: dis(iffer)
  2           0 LOAD_GLOBAL              0 (foo) 
              3 POP_JUMP_IF_FALSE       19 

  3           6 LOAD_GLOBAL              1 (print) 
              9 LOAD_CONST               1 ('foo') 
             12 CALL_FUNCTION            1 (1 positional, 0 keyword pair) 
             15 POP_TOP              
             16 JUMP_FORWARD            23 (to 42) 

  4     >>   19 LOAD_GLOBAL              2 (bar) 
             22 POP_JUMP_IF_FALSE       38 

  5          25 LOAD_GLOBAL              1 (print) 
             28 LOAD_CONST               2 ('bar') 
             31 CALL_FUNCTION            1 (1 positional, 0 keyword pair) 
             34 POP_TOP              
             35 JUMP_FORWARD             4 (to 42) 

  7     >>   38 LOAD_CONST               0 (None) 
             41 RETURN_VALUE         
        >>   42 LOAD_CONST               0 (None) 
             45 RETURN_VALUE         

In [12]: dis(iffer2)
  2           0 LOAD_GLOBAL              0 (foo) 
              3 POP_JUMP_IF_FALSE       19 

  3           6 LOAD_GLOBAL              1 (print) 
              9 LOAD_CONST               1 ('foo') 
             12 CALL_FUNCTION            1 (1 positional, 0 keyword pair) 
             15 POP_TOP              
             16 JUMP_FORWARD            23 (to 42) 

  5     >>   19 LOAD_GLOBAL              2 (bar) 
             22 POP_JUMP_IF_FALSE       38 

  6          25 LOAD_GLOBAL              1 (print) 
             28 LOAD_CONST               2 ('bar') 
             31 CALL_FUNCTION            1 (1 positional, 0 keyword pair) 
             34 POP_TOP              
             35 JUMP_FORWARD             4 (to 42) 

  8     >>   38 LOAD_CONST               0 (None) 
             41 RETURN_VALUE         
        >>   42 LOAD_CONST               0 (None) 
             45 RETURN_VALUE         
~~~

Almost identical, except for different last-line number.
four steps

 * lexing
 * parsing
 * compiling
 * interpreting: the main subject of this talk

`ceval.c`: 5000-line program with a huge block of `case` statements.

See `TARGET(LOAD_GLOBAL)` entry.

def modder(a, b):
    return a % b

In [14]: modder(7, 5)
Out[14]: 2

In [17]: modder('hello %s','world')
Out[17]: 'hello world'

In [19]: dis(modder)
  2           0 LOAD_FAST                0 (a) 
              3 LOAD_FAST                1 (b) 
              6 BINARY_MODULO        
              7 RETURN_VALUE         

class Surprise(object):
    def __init__(self):
        pass
    def __mod__(self, other):
        return 'percent'

~~~
In [21]: s = Surprise()

In [22]: t = Surprise()

In [23]: s % t
Out[23]: 'percent'
~~~

`PyString_CheckExact()`: checks that the typ is th correct one.

Interpreter knows much less than the compiler of a compiled language.

Every method is invoked as intrinsically arbitrary.

ByteRun.py

`pyvm2.py` is the main tool.

VmTextCase helper: run code first through VM of byterun and then through the regular python interpreter and see if the same results are found.

PyObject

----

new context manager can be defined with `__enter__()` in a new class `Manager(object)`.

class Manager(object):
    def __enter__(self):
        print('entering')
    def __exit__(self, exc_type, exc_message, exc_tb):
        print('exiting')

In [29]: with Manager():
   ....:         print('body')
   ....:     
entering
body
exiting

a = 257
b = 257
a is b

a = 257 ; b = 257 ; a is b

OpCode prediction macros

Try this later in Python 2:

~~~
In [41]: li = compile('[c for c in range(10)]', '', 'exec')

In [42]: dis(li)
  1           0 LOAD_CONST               0 (<code object <listcomp> at 0x109f486f0, file "", line 1>) 
              3 LOAD_CONST               1 ('<listcomp>') 
              6 MAKE_FUNCTION            0 
              9 LOAD_NAME                0 (range) 
             12 LOAD_CONST               2 (10) 
             15 CALL_FUNCTION            1 (1 positional, 0 keyword pair) 
             18 GET_ITER             
             19 CALL_FUNCTION            1 (1 positional, 0 keyword pair) 
             22 POP_TOP              
             23 LOAD_CONST               3 (None) 
             26 RETURN_VALUE         
~~~

~~~
def gen():
    i = 1
    while True:
        yield
        yield i
--